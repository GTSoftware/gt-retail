[{"/home/rodrigo/UI_Projects/gt-retail/webapp/src/index.js":"1","/home/rodrigo/UI_Projects/gt-retail/webapp/src/App.js":"2","/home/rodrigo/UI_Projects/gt-retail/webapp/src/ScrollToTop.js":"3","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/LoginService.js":"4","/home/rodrigo/UI_Projects/gt-retail/webapp/src/AppTopbar.js":"5","/home/rodrigo/UI_Projects/gt-retail/webapp/src/AppMenu.js":"6","/home/rodrigo/UI_Projects/gt-retail/webapp/src/AppFooter.js":"7","/home/rodrigo/UI_Projects/gt-retail/webapp/src/AppProfile.js":"8","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/Login.js":"9","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/UsersList.js":"10","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/PageNotFound.js":"11","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/shop-cart/ShopCart.js":"12","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/dashboard/GTDashboard.js":"13","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/delivery-note/ManualDeliveryNote.js":"14","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/delivery-note/SearchDeliveryNotes.js":"15","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/pricing/BatchPricing.js":"16","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/stock/ProductHistory.js":"17","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/sale/SearchSales.js":"18","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/sale/ViewSale.js":"19","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/report/SalesByProductReport.js":"20","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/payment/SearchPendingSales.js":"21","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/fiscal/FiscalBooks.js":"22","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/products/ProductsInventory.js":"23","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/ProductsService.js":"24","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/FiscalBookService.js":"25","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/payment/PayDialog.js":"26","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/PaymentPendingSalesService.js":"27","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/ShopCartService.js":"28","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/LoadingButton.js":"29","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/SearchProductsFilter.js":"30","/home/rodrigo/UI_Projects/gt-retail/webapp/src/utils/DateUtils.js":"31","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/FileOutputsService.js":"32","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/DefaultProps.js":"33","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/ReportsService.js":"34","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/sale/InvoiceDialog.js":"35","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/SalesService.js":"36","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/payment/CashSaleToPay.js":"37","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/AutocompleteProductFilter.js":"38","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/StockService.js":"39","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/DeliveryNotesService.js":"40","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/pricing/AddPercentDialog.js":"41","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/SearchProductsTable.js":"42","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/SearchProductsDialog.js":"43","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/DashboardService.js":"44","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/shop-cart/ShopCartConfirmation.js":"45","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/shop-cart/ShopCartPayment.js":"46","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/shop-cart/ShopCartCustomer.js":"47","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/shop-cart/ShopCartItems.js":"48","/home/rodrigo/UI_Projects/gt-retail/webapp/src/stores/ShopCartStore.js":"49","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/shop-cart/AddNewCustomerDialog.js":"50","/home/rodrigo/UI_Projects/gt-retail/webapp/src/stores/SessionStore.js":"51","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/SucursalesService.js":"52","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/UsersService.js":"53","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/CustomersService.js":"54","/home/rodrigo/UI_Projects/gt-retail/webapp/src/custom-error-form.messages.js":"55","/home/rodrigo/UI_Projects/gt-retail/webapp/src/utils/StringUtils.js":"56","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/CategoriesSelector.js":"57","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/SubCategoriesSelector.js":"58","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/BrandsSelector.js":"59","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/BrandsService.js":"60","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/AutocompleteSupplierFilter.js":"61","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/SuppliersService.js":"62","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/CategoriesService.js":"63","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/products/ProductDetails.js":"64","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/FiscalTaxRateService.js":"65","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/FiscalTaxRateSelector.js":"66","/home/rodrigo/UI_Projects/gt-retail/webapp/src/utils/Logger.js":"67","/home/rodrigo/UI_Projects/gt-retail/webapp/src/utils/HTTPService.js":"68","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/PercentTypesSelector.js":"69","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/PriceListSelector.js":"70","/home/rodrigo/UI_Projects/gt-retail/webapp/src/utils/ExcelExporter.js":"71","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/sale/ExportSalesUtils.js":"72","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/ProductSupplyTypeSelector.js":"73","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/ProductUnitTypeSelector.js":"74","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/SearchPersonsFilter.js":"75","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/customers/CustomersInventory.js":"76","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/customers/CustomerDetails.js":"77","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/InvoicePrintSplitButton.js":"78","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/BudgetPrintSplitButton.js":"79"},{"size":630,"mtime":1616886877808,"results":"80","hashOfConfig":"81"},{"size":12667,"mtime":1652291966415,"results":"82","hashOfConfig":"81"},{"size":336,"mtime":1616886877793,"results":"83","hashOfConfig":"81"},{"size":1346,"mtime":1666459322469,"results":"84","hashOfConfig":"81"},{"size":1959,"mtime":1616886877793,"results":"85","hashOfConfig":"81"},{"size":3294,"mtime":1616886877793,"results":"86","hashOfConfig":"81"},{"size":516,"mtime":1616886877793,"results":"87","hashOfConfig":"81"},{"size":1860,"mtime":1616886877793,"results":"88","hashOfConfig":"81"},{"size":3409,"mtime":1652389909962,"results":"89","hashOfConfig":"81"},{"size":7504,"mtime":1619181117477,"results":"90","hashOfConfig":"81"},{"size":439,"mtime":1651437005854,"results":"91","hashOfConfig":"81"},{"size":2858,"mtime":1616886877807,"results":"92","hashOfConfig":"81"},{"size":6199,"mtime":1619180401328,"results":"93","hashOfConfig":"81"},{"size":18152,"mtime":1662574845155,"results":"94","hashOfConfig":"81"},{"size":6313,"mtime":1616886877802,"results":"95","hashOfConfig":"81"},{"size":12072,"mtime":1666245984520,"results":"96","hashOfConfig":"81"},{"size":5862,"mtime":1616886877808,"results":"97","hashOfConfig":"81"},{"size":11269,"mtime":1665776038768,"results":"98","hashOfConfig":"81"},{"size":5638,"mtime":1665776038825,"results":"99","hashOfConfig":"81"},{"size":4102,"mtime":1652302321413,"results":"100","hashOfConfig":"81"},{"size":12171,"mtime":1616886877803,"results":"101","hashOfConfig":"81"},{"size":3865,"mtime":1619137753750,"results":"102","hashOfConfig":"81"},{"size":4552,"mtime":1662396943561,"results":"103","hashOfConfig":"81"},{"size":4069,"mtime":1642100958144,"results":"104","hashOfConfig":"81"},{"size":940,"mtime":1619181117635,"results":"105","hashOfConfig":"81"},{"size":3354,"mtime":1616886877803,"results":"106","hashOfConfig":"81"},{"size":548,"mtime":1619181117708,"results":"107","hashOfConfig":"81"},{"size":1861,"mtime":1622689384824,"results":"108","hashOfConfig":"81"},{"size":738,"mtime":1645388480217,"results":"109","hashOfConfig":"81"},{"size":7056,"mtime":1652388990999,"results":"110","hashOfConfig":"81"},{"size":710,"mtime":1616886877814,"results":"111","hashOfConfig":"81"},{"size":870,"mtime":1664021835883,"results":"112","hashOfConfig":"81"},{"size":120,"mtime":1616886877795,"results":"113","hashOfConfig":"81"},{"size":208,"mtime":1619181117730,"results":"114","hashOfConfig":"81"},{"size":2859,"mtime":1652389910538,"results":"115","hashOfConfig":"81"},{"size":714,"mtime":1619181117745,"results":"116","hashOfConfig":"81"},{"size":2072,"mtime":1616886877803,"results":"117","hashOfConfig":"81"},{"size":2373,"mtime":1616886877799,"results":"118","hashOfConfig":"81"},{"size":245,"mtime":1619181117776,"results":"119","hashOfConfig":"81"},{"size":2344,"mtime":1619181117593,"results":"120","hashOfConfig":"81"},{"size":3974,"mtime":1665776038413,"results":"121","hashOfConfig":"81"},{"size":3194,"mtime":1616886877800,"results":"122","hashOfConfig":"81"},{"size":7225,"mtime":1616886877800,"results":"123","hashOfConfig":"81"},{"size":472,"mtime":1619181117575,"results":"124","hashOfConfig":"81"},{"size":2598,"mtime":1619181117146,"results":"125","hashOfConfig":"81"},{"size":19487,"mtime":1623197313550,"results":"126","hashOfConfig":"81"},{"size":5553,"mtime":1651436992261,"results":"127","hashOfConfig":"81"},{"size":14246,"mtime":1652301919319,"results":"128","hashOfConfig":"81"},{"size":2317,"mtime":1616886877814,"results":"129","hashOfConfig":"81"},{"size":22478,"mtime":1645386798806,"results":"130","hashOfConfig":"81"},{"size":462,"mtime":1616886877814,"results":"131","hashOfConfig":"81"},{"size":303,"mtime":1619181117792,"results":"132","hashOfConfig":"81"},{"size":303,"mtime":1619181117815,"results":"133","hashOfConfig":"81"},{"size":3591,"mtime":1651437007223,"results":"134","hashOfConfig":"81"},{"size":244,"mtime":1616886877808,"results":"135","hashOfConfig":"81"},{"size":750,"mtime":1616886877815,"results":"136","hashOfConfig":"81"},{"size":1073,"mtime":1652301917407,"results":"137","hashOfConfig":"81"},{"size":1258,"mtime":1666246139488,"results":"138","hashOfConfig":"81"},{"size":992,"mtime":1652301917390,"results":"139","hashOfConfig":"81"},{"size":155,"mtime":1619181117504,"results":"140","hashOfConfig":"81"},{"size":1199,"mtime":1652301917375,"results":"141","hashOfConfig":"81"},{"size":437,"mtime":1619181117807,"results":"142","hashOfConfig":"81"},{"size":300,"mtime":1619181117519,"results":"143","hashOfConfig":"81"},{"size":22182,"mtime":1652387748321,"results":"144","hashOfConfig":"81"},{"size":165,"mtime":1619181117644,"results":"145","hashOfConfig":"81"},{"size":1060,"mtime":1652301917423,"results":"146","hashOfConfig":"81"},{"size":90,"mtime":1619181118025,"results":"147","hashOfConfig":"81"},{"size":3974,"mtime":1643396456397,"results":"148","hashOfConfig":"81"},{"size":1077,"mtime":1652301917458,"results":"149","hashOfConfig":"81"},{"size":1044,"mtime":1652301917471,"results":"150","hashOfConfig":"81"},{"size":813,"mtime":1625939363616,"results":"151","hashOfConfig":"81"},{"size":529,"mtime":1625939362361,"results":"152","hashOfConfig":"81"},{"size":1144,"mtime":1652301917489,"results":"153","hashOfConfig":"81"},{"size":1056,"mtime":1652301917506,"results":"154","hashOfConfig":"81"},{"size":1579,"mtime":1651437005087,"results":"155","hashOfConfig":"81"},{"size":3431,"mtime":1652291995403,"results":"156","hashOfConfig":"81"},{"size":20077,"mtime":1652216895410,"results":"157","hashOfConfig":"81"},{"size":846,"mtime":1664024113835,"results":"158","hashOfConfig":"81"},{"size":853,"mtime":1664024105573,"results":"159","hashOfConfig":"81"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},"1v39b96",{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"162"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"162"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"162"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"162"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"162"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"162"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"162"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"162"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"162"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"162"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"162"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"162"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"162"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},"/home/rodrigo/UI_Projects/gt-retail/webapp/src/index.js",[],["337","338"],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/App.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/ScrollToTop.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/LoginService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/AppTopbar.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/AppMenu.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/AppFooter.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/AppProfile.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/Login.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/UsersList.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/PageNotFound.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/shop-cart/ShopCart.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/dashboard/GTDashboard.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/delivery-note/ManualDeliveryNote.js",["339"],"import React, { useEffect, useRef, useState } from \"react\"\nimport { SelectButton } from \"primereact/selectbutton\"\nimport { Dropdown } from \"primereact/dropdown\"\nimport { AutoComplete } from \"primereact/autocomplete\"\nimport { DeliveryNotesService } from \"../../service/DeliveryNotesService\"\nimport { Button } from \"primereact/button\"\nimport { Panel } from \"primereact/panel\"\nimport { InputText } from \"primereact/inputtext\"\nimport { LoadingButton } from \"../core/LoadingButton\"\nimport { Checkbox } from \"primereact/checkbox\"\nimport { Toast } from \"primereact/toast\"\nimport { DataTable } from \"primereact/datatable\"\nimport { DEFAULT_DATA_TABLE_PROPS } from \"../DefaultProps\"\nimport { Column } from \"primereact/column\"\nimport _ from \"lodash\"\nimport { InputTextarea } from \"primereact/inputtextarea\"\nimport FileOutputsService from \"../../service/FileOutputsService\"\nimport { SearchProductsDialog } from \"../core/SearchProductsDialog\"\nimport { v4 as uuid } from \"uuid\"\n\nconst DELIVERY_DIRECTION = {\n  INTERNAL: \"Interno\",\n  EXTERNAL: \"Externo\",\n}\n\nconst DELIVERY_DIRECTIONS = [\n  DELIVERY_DIRECTION.INTERNAL,\n  DELIVERY_DIRECTION.EXTERNAL,\n]\n\nexport const ManualDeliveryNote = () => {\n  const deliveryNotesService = new DeliveryNotesService()\n\n  const [originDirection, setOriginDirection] = useState(DELIVERY_DIRECTION.EXTERNAL)\n  const [destinationDirection, setDestinationDirection] = useState(\n    DELIVERY_DIRECTION.INTERNAL\n  )\n  const [deliveryItems, setDeliveryItems] = useState([])\n  const [deliveryTypes, setDeliveryTypes] = useState([])\n  const [warehouses, setWarehouses] = useState([])\n  const [filteredPersons, setFilteredPersons] = useState([])\n  const [origin, setOrigin] = useState(null)\n  const [deliveryType, setDeliveryType] = useState(null)\n  const [destination, setDestination] = useState(null)\n  const [firstStepDone, setFirstStepDone] = useState(false)\n  const [panelCollapsed, setPanelCollapsed] = useState(false)\n  const [productToSearch, setProductToSearch] = useState({\n    productId: \"\",\n    productCode: \"\",\n    supplierCode: \"\",\n    quantity: 1,\n    usePurchaseUnits: false,\n  })\n  const [loadingAddProduct, setLoadingAddProduct] = useState(false)\n  const [observations, setObservations] = useState(\"\")\n  const [savingDeliveryNote, setSavingDeliveryNote] = useState(false)\n  const [savedDeliveryNoteId, setSavedDeliveryNoteId] = useState(null)\n  const [showSearchProductsDialog, setShowSearchProductsDialog] = useState(false)\n  const [onlyForSupplier, setOnlyForSupplier] = useState(true)\n\n  useEffect(() => {\n    deliveryNotesService.getDeliveryTypes((deliveryTypes) =>\n      setDeliveryTypes(deliveryTypes)\n    )\n    deliveryNotesService.getWarehouses((warehouses) => setWarehouses(warehouses))\n  }, [])\n\n  const toast = useRef(null)\n\n  const getPanelHeader = () => {\n    let header = \"Origen y destino\"\n\n    if (firstStepDone) {\n      header = `Origen: ${origin.displayName} Destino: ${destination.displayName} - ${deliveryType.nombreTipo}`\n    }\n\n    return header\n  }\n\n  const renderOriginSection = () => {\n    return (\n      <div className=\"p-col-6\">\n        <h3>Origen:</h3>\n        <SelectButton\n          disabled={firstStepDone}\n          value={originDirection}\n          options={DELIVERY_DIRECTIONS}\n          onChange={(e) => handleDeliveryDirectionChange(\"origin\", e.value)}\n        />\n        {renderOriginSelector()}\n      </div>\n    )\n  }\n\n  const renderOriginSelector = () => {\n    let originSelector = (\n      <Dropdown\n        id=\"internalOrigin\"\n        optionLabel=\"displayName\"\n        placeholder=\"Seleccione un depósito\"\n        options={warehouses}\n        value={origin}\n        disabled={firstStepDone}\n        onChange={(e) => setOrigin(e.value)}\n      />\n    )\n    if (DELIVERY_DIRECTION.EXTERNAL === originDirection) {\n      originSelector = (\n        <AutoComplete\n          minLength={2}\n          placeholder=\"Comience a escribir para buscar una persona\"\n          delay={500}\n          id=\"originPersonField\"\n          completeMethod={(event) => filterPersons(event.query)}\n          suggestions={filteredPersons}\n          field=\"displayName\"\n          required={true}\n          disabled={firstStepDone}\n          onChange={(e) => setOrigin(e.value)}\n          value={origin || \"\"}\n        />\n      )\n    }\n\n    return originSelector\n  }\n\n  const renderDestinationSection = () => {\n    return (\n      <div className=\"p-col-6\">\n        <h3>Destino:</h3>\n        <SelectButton\n          disabled={firstStepDone}\n          value={destinationDirection}\n          options={DELIVERY_DIRECTIONS}\n          onChange={(e) => handleDeliveryDirectionChange(\"destination\", e.value)}\n        />\n        {renderDestinationSelector()}\n      </div>\n    )\n  }\n\n  const renderDestinationSelector = () => {\n    let destinationSelector = (\n      <Dropdown\n        id=\"internalDestination\"\n        disabled={firstStepDone}\n        optionLabel=\"displayName\"\n        placeholder=\"Seleccione un depósito\"\n        options={warehouses}\n        value={destination}\n        onChange={(e) => setDestination(e.value)}\n      />\n    )\n    if (DELIVERY_DIRECTION.EXTERNAL === destinationDirection) {\n      destinationSelector = (\n        <AutoComplete\n          minLength={2}\n          placeholder=\"Comience a escribir para buscar una persona\"\n          delay={500}\n          disabled={firstStepDone}\n          id=\"destinationPersonField\"\n          completeMethod={(event) => filterPersons(event.query)}\n          suggestions={filteredPersons}\n          field=\"displayName\"\n          required={true}\n          onChange={(e) => setDestination(e.value)}\n          value={destination || \"\"}\n        />\n      )\n    }\n\n    return destinationSelector\n  }\n\n  const renderDeliveryTypeSection = () => {\n    return (\n      <div className=\"p-col-12\">\n        <h3>Tipo de movimiento:</h3>\n        <Dropdown\n          id=\"deliveryType\"\n          optionLabel=\"nombreTipo\"\n          placeholder=\"Seleccione el tipo de movimiento\"\n          options={deliveryTypes}\n          value={deliveryType}\n          disabled={firstStepDone}\n          onChange={(e) => setDeliveryType(e.value)}\n        />\n      </div>\n    )\n  }\n\n  const renderConfirmFirstStepButton = () => {\n    let nextStepButton = null\n\n    if (\n      !firstStepDone &&\n      origin &&\n      destination &&\n      deliveryType &&\n      !(\n        DELIVERY_DIRECTION.EXTERNAL === originDirection &&\n        DELIVERY_DIRECTION.EXTERNAL === destinationDirection\n      )\n    ) {\n      nextStepButton = (\n        <Button\n          label=\"Confirmar\"\n          className=\"p-button-success\"\n          onClick={() => {\n            setFirstStepDone(true)\n            setPanelCollapsed(true)\n          }}\n          icon=\"fa fa-fw fa-arrow-down\"\n        />\n      )\n    }\n\n    return nextStepButton\n  }\n\n  const renderAddItemsSection = () => {\n    return (\n      <div className=\"p-card-body p-fluid p-grid\">\n        <div className=\"p-col-1 p-lg-1\">\n          <InputText\n            id=\"id\"\n            autoFocus\n            onChange={(e) => {\n              handleSearchProductPropertyChange(\"productId\", e.target.value)\n            }}\n            value={productToSearch.productId}\n            keyfilter=\"int\"\n            placeholder=\"Id\"\n            onKeyPress={handleEnterKeyPress}\n          />\n        </div>\n        <div className=\"p-col-2 p-lg-2\">\n          <InputText\n            id=\"supplierCode\"\n            onChange={(e) => {\n              handleSearchProductPropertyChange(\"supplierCode\", e.target.value)\n            }}\n            value={productToSearch.supplierCode}\n            placeholder=\"Código de fábrica\"\n            onKeyPress={handleEnterKeyPress}\n          />\n        </div>\n        <div className=\"p-col-2 p-lg-2\">\n          <InputText\n            id=\"codigo\"\n            onChange={(e) => {\n              handleSearchProductPropertyChange(\"productCode\", e.target.value)\n            }}\n            value={productToSearch.productCode}\n            placeholder=\"Código propio\"\n            onKeyPress={handleEnterKeyPress}\n          />\n        </div>\n        <div className=\"p-col-2 p-lg-2\">\n          <div className=\"p-inputgroup\">\n            <span className=\"p-inputgroup-addon\">\n              <Checkbox\n                id=\"usePurchaseUnits\"\n                onChange={(e) => {\n                  handleSearchProductPropertyChange(\"usePurchaseUnits\", e.checked)\n                }}\n                tooltip={\"Usar unidades de compra\"}\n                checked={productToSearch.usePurchaseUnits}\n              />\n            </span>\n            <InputText\n              id=\"cantidad\"\n              keyfilter=\"num\"\n              onChange={(e) => {\n                handleSearchProductPropertyChange(\"quantity\", e.target.value)\n              }}\n              value={productToSearch.quantity}\n              placeholder=\"Cantidad\"\n              onKeyPress={handleEnterKeyPress}\n            />\n          </div>\n        </div>\n\n        <div className=\"p-col-2 p-lg-2\">\n          <label htmlFor=\"limitToSupplier\">Limitar al proveedor:</label>\n          <Checkbox\n            id=\"limitToSupplier\"\n            onChange={(e) => setOnlyForSupplier(e.checked)}\n            checked={onlyForSupplier}\n          />\n        </div>\n\n        <div className=\"p-col-2 p-lg-2\">\n          <LoadingButton\n            type=\"button\"\n            icon=\"fa fa-fw fa-plus\"\n            className=\"p-button-success shop-cart--add-product-button\"\n            onClick={tryAddProduct}\n            loading={loadingAddProduct}\n            tooltip={\"Agregar producto\"}\n          />\n\n          <Button\n            type=\"button\"\n            className=\"shop-cart--search-product-button\"\n            icon=\"fa fa-fw fa-search\"\n            tooltip={\"Buscar productos\"}\n            onClick={() => setShowSearchProductsDialog(true)}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  const renderDeliveryItemsSection = () => {\n    const internalOrigin = DELIVERY_DIRECTION.INTERNAL === originDirection\n    const internalDestination = DELIVERY_DIRECTION.INTERNAL === destinationDirection\n\n    return (\n      <DataTable {...getItemsTableProps()}>\n        <Column\n          key=\"productId\"\n          field=\"productId\"\n          header=\"Id\"\n          style={{ width: \"5%\" }}\n        />\n        <Column\n          key=\"productCode\"\n          field=\"productCode\"\n          header=\"Código\"\n          style={{ width: \"8%\" }}\n        />\n        <Column\n          key=\"supplierCode\"\n          field=\"supplierCode\"\n          header=\"Cod. Fábrica\"\n          style={{ width: \"8%\" }}\n        />\n        <Column\n          key=\"description\"\n          field=\"description\"\n          header=\"Descripción\"\n          style={{ width: \"20%\" }}\n        />\n        <Column key=\"totalStock\" field=\"totalStock\" header=\"Stock total\" />\n        <Column key=\"quantity\" field=\"quantity\" header=\"Cantidad\" />\n\n        {internalOrigin && (\n          <Column\n            key=\"originWarehouseNewStock\"\n            field=\"originWarehouseNewStock\"\n            header=\"Remanente en origen\"\n          />\n        )}\n\n        {internalDestination && (\n          <Column\n            key=\"destinationWarehouseNewStock\"\n            field=\"destinationWarehouseNewStock\"\n            header=\"Stock en destino\"\n          />\n        )}\n\n        <Column key=\"purchaseUnits\" field=\"purchaseUnits\" header=\"Un. Venta\" />\n        <Column key=\"saleUnits\" field=\"saleUnits\" header=\"Un. Compra\" />\n        <Column\n          key=\"actions\"\n          body={getTableActions}\n          style={{ textAlign: \"center\", width: \"7em\" }}\n        />\n      </DataTable>\n    )\n  }\n\n  const renderFooterSection = () => {\n    return (\n      <div className=\"p-fluid p-grid\">\n        <div className=\"p-col-12\">\n          <label htmlFor=\"observaciones\">Observaciones:</label>\n          <InputTextarea\n            value={observations}\n            onChange={(e) => setObservations(e.target.value)}\n          />\n        </div>\n        <div className=\"p-col-6\">\n          {!savedDeliveryNoteId && (\n            <LoadingButton\n              loading={savingDeliveryNote}\n              className=\"p-button-success\"\n              icon=\"fa fa-fw fa-save\"\n              label=\"Guardar\"\n              disabled={deliveryItems.length === 0}\n              onClick={saveDeliveryNote}\n            />\n          )}\n          {savedDeliveryNoteId && (\n            <Button\n              label=\"Imprimir Remito\"\n              icon=\"fa fa-fw fa-print\"\n              onClick={() => {\n                FileOutputsService.getDeliveryNote(savedDeliveryNoteId)\n              }}\n            />\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  const renderSearchProductsDialog = () => {\n    return (\n      <SearchProductsDialog\n        visible={showSearchProductsDialog}\n        modal={true}\n        acceptCallback={handleSelectedProduct}\n        onHide={() => setShowSearchProductsDialog(false)}\n      />\n    )\n  }\n\n  const getItemsTableProps = () => {\n    let header = <div className=\"p-clearfix\">Productos</div>\n    let footer = (\n      <div className=\"p-clearfix\">\n        <label>Renglones: {deliveryItems.length}</label>\n      </div>\n    )\n\n    return {\n      ...DEFAULT_DATA_TABLE_PROPS,\n      ...{\n        value: deliveryItems,\n        header: header,\n        footer: footer,\n        resizableColumns: true,\n        emptyMessage: \"Todavía no se han agregado productos al remito\",\n      },\n    }\n  }\n\n  const getTableActions = (rowData) => {\n    return (\n      <Button\n        type=\"button\"\n        icon=\"fa fa-fw fa-trash\"\n        className=\"p-button-danger\"\n        onClick={() => removeItem(rowData)}\n        tooltip={\"Quitar ítem\"}\n      />\n    )\n  }\n\n  const handleDeliveryDirectionChange = (direction, value) => {\n    if (value) {\n      if (direction === \"origin\") {\n        setOriginDirection(value)\n        setOrigin(null)\n      } else {\n        setDestinationDirection(value)\n        setDestination(null)\n      }\n    }\n  }\n\n  const filterPersons = (query) => {\n    deliveryNotesService.searchPersons(query, (data) =>\n      setFilteredPersons(data.data)\n    )\n  }\n\n  const handleSearchProductPropertyChange = (property, value) => {\n    let searchFields = { ...productToSearch }\n\n    searchFields[property] = value\n\n    setProductToSearch(searchFields)\n  }\n\n  const tryAddProduct = () => {\n    let searchCriteria = { ...productToSearch }\n\n    if (shouldSearch(searchCriteria)) {\n      setLoadingAddProduct(true)\n\n      if (DELIVERY_DIRECTION.INTERNAL === originDirection) {\n        searchCriteria.originWarehouseId = origin.warehouseId\n      }\n\n      if (DELIVERY_DIRECTION.INTERNAL === destinationDirection) {\n        searchCriteria.destinationWarehouseId = destination.warehouseId\n      }\n\n      if (onlyForSupplier && DELIVERY_DIRECTION.EXTERNAL === originDirection) {\n        searchCriteria.supplierId = origin.personId\n      }\n\n      deliveryNotesService.addProduct(searchCriteria, handleAddItem, handleError)\n    }\n  }\n\n  const shouldSearch = (searchCriteria) => {\n    return (\n      searchCriteria.supplierCode ||\n      searchCriteria.productCode ||\n      searchCriteria.productId\n    )\n  }\n\n  const handleAddItem = (deliveryItem) => {\n    deliveryItem.itemNumber = uuid()\n    setLoadingAddProduct(false)\n\n    const newDeliveryItems = [...deliveryItems]\n\n    newDeliveryItems.splice(0, 0, deliveryItem)\n\n    setDeliveryItems(newDeliveryItems)\n    clearProductSearch()\n  }\n\n  const handleError = (error) => {\n    setLoadingAddProduct(false)\n\n    toast.current.show({\n      severity: \"error\",\n      summary: \"El producto no existe o no corresponde con el proveedor\",\n      detail: error.message,\n    })\n  }\n\n  const handleSaveError = (error) => {\n    setSavingDeliveryNote(false)\n\n    toast.current.show({\n      severity: \"error\",\n      summary: \"No se pudo guardar el remito\",\n      detail: _.get(error, \"response.data.message\", \"\"),\n    })\n  }\n\n  const clearProductSearch = () => {\n    productToSearch.quantity = 1\n    productToSearch.productId = \"\"\n    productToSearch.productCode = \"\"\n    productToSearch.supplierCode = \"\"\n\n    setProductToSearch(productToSearch)\n  }\n\n  const removeItem = (rowData) => {\n    _.remove(deliveryItems, (item) => {\n      return item.itemNumber === rowData.itemNumber\n    })\n\n    setDeliveryItems(deliveryItems)\n  }\n\n  const handleEnterKeyPress = (event) => {\n    if (event.key === \"Enter\" && !loadingAddProduct) {\n      tryAddProduct()\n    }\n  }\n\n  const saveDeliveryNote = () => {\n    let deliveryNote = {\n      originDirection: originDirection,\n      destinationDirection: destinationDirection,\n      origin: origin,\n      destination: destination,\n      deliveryNoteItems: deliveryItems,\n      observations: observations,\n      deliveryType: deliveryType,\n    }\n\n    setSavingDeliveryNote(true)\n\n    deliveryNotesService.saveDeliveryNote(\n      deliveryNote,\n      handleSaveSuccess,\n      handleSaveError\n    )\n  }\n\n  const handleSaveSuccess = (savedDeliveryNoteId) => {\n    setSavingDeliveryNote(false)\n    setSavedDeliveryNoteId(savedDeliveryNoteId)\n\n    toast.current.show({\n      severity: \"info\",\n      summary: \"Remito generado exitosamente\",\n      detail: `Número: ${savedDeliveryNoteId}`,\n    })\n  }\n\n  const handleSelectedProduct = (searchProduct) => {\n    productToSearch.productId = searchProduct.productId\n\n    setProductToSearch(productToSearch)\n    tryAddProduct()\n  }\n\n  const renderSecondStep = () => {\n    return (\n      <>\n        <div className=\"SeparatorFull\" />\n        {renderAddItemsSection()}\n        {renderDeliveryItemsSection()}\n        <div className=\"SeparatorFull\" />\n        {renderFooterSection()}\n      </>\n    )\n  }\n\n  return (\n    <div className=\"card card-w-title\">\n      <Toast ref={toast} />\n\n      {renderSearchProductsDialog()}\n      <h1>Nuevo remito manual</h1>\n      <Panel\n        header={getPanelHeader()}\n        toggleable={true}\n        collapsed={panelCollapsed}\n        onToggle={(e) => setPanelCollapsed(e.value)}\n      >\n        <div className=\"p-grid p-fluid\">\n          {renderOriginSection()}\n          {renderDestinationSection()}\n          {renderDeliveryTypeSection()}\n        </div>\n      </Panel>\n      {renderConfirmFirstStepButton()}\n\n      {firstStepDone && renderSecondStep()}\n    </div>\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/delivery-note/SearchDeliveryNotes.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/pricing/BatchPricing.js",["340"],"import _ from \"lodash\"\nimport React, { useEffect, useRef, useState } from \"react\"\nimport { ProductsService } from \"../../service/ProductsService\"\nimport { Toast } from \"primereact/toast\"\nimport { Dropdown } from \"primereact/dropdown\"\nimport { Button } from \"primereact/button\"\nimport { SearchProductsTable } from \"../core/SearchProductsTable\"\nimport { InputNumber } from \"primereact/inputnumber\"\nimport { Checkbox } from \"primereact/checkbox\"\nimport { LoadingButton } from \"../core/LoadingButton\"\nimport { AddPercentDialog } from \"./AddPercentDialog\"\nimport { DataTable } from \"primereact/datatable\"\nimport { Column } from \"primereact/column\"\nimport { InputText } from \"primereact/inputtext\"\nimport { BrandsSelector } from \"../core/BrandsSelector\"\nimport { AutocompleteSupplierFilter } from \"../core/AutocompleteSupplierFilter\"\nimport { CategoriesSelector } from \"../core/CategoriesSelector\"\nimport { SubCategoriesSelector } from \"../core/SubCategoriesSelector\"\nimport { v4 as uuid } from \"uuid\"\n\nexport const BatchPricing = () => {\n  const [supplyTypes, setSupplyTypes] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [productsSearchOptions, setProductsSearchOptions] = useState({\n    supplyType: null,\n    category: null,\n    subCategory: null,\n    brand: null,\n    supplier: null,\n    containsText: \"\",\n  })\n  const [filteredProducts, setFilteredProducts] = useState([])\n  const [totalResults, setTotalResults] = useState(0)\n  const [updateOptions, setUpdateOptions] = useState({\n    updateCost: false,\n    costPercent: 0,\n    updatePercents: false,\n    percentsToAdd: [],\n    percentsToDelete: [],\n  })\n  const [updatingPrices, setUpdatingPrices] = useState(false)\n  const [showAddPercentDialog, setShowAddPercentDialog] = useState(false)\n  const productsService = new ProductsService()\n  const toast = useRef(null)\n\n  useEffect(() => {\n    productsService.getSupplyTypes((supplyTypes) => setSupplyTypes(supplyTypes))\n  }, [])\n\n  const renderFilterSection = () => {\n    return (\n      <div className=\"p-grid p-fluid\">\n        <div className=\"p-col-12\">\n          <label htmlFor=\"supplyType\">{\"Tipo de proveeduría:\"}</label>\n          <Dropdown\n            id=\"supplyType\"\n            dataKey=\"supplyTypeId\"\n            options={supplyTypes}\n            showClear={true}\n            value={productsSearchOptions.supplyType}\n            optionLabel=\"displayName\"\n            onChange={(e) =>\n              handleProductsSearchOptionsChange(\"supplyType\", e.value)\n            }\n          />\n        </div>\n\n        <div className=\"p-col-12\">\n          <label htmlFor=\"supplier\">{\"Proveedor:\"}</label>\n          <AutocompleteSupplierFilter\n            onSupplierSelect={(supplier) =>\n              handleProductsSearchOptionsChange(\"supplier\", supplier)\n            }\n          />\n        </div>\n\n        <div className=\"p-col-12\">\n          <label htmlFor=\"brand\">Marca:</label>\n          <BrandsSelector\n            onBrandSelect={(brand) =>\n              handleProductsSearchOptionsChange(\"brand\", brand)\n            }\n          />\n        </div>\n\n        <div className=\"p-col-6\">\n          <label htmlFor=\"category\">{\"Rubro:\"}</label>\n          <CategoriesSelector\n            onCategorySelect={(category) => {\n              handleProductsSearchOptionsChange(\"category\", category)\n            }}\n          />\n        </div>\n        <div className=\"p-col-6\">\n          <label htmlFor=\"subCategory\">Sub-Rubro:</label>\n          <SubCategoriesSelector\n            onSubCategorySelect={(subCat) =>\n              handleProductsSearchOptionsChange(\"subCategory\", subCat)\n            }\n            categoryId={_.get(productsSearchOptions, \"category.categoryId\")}\n          />\n        </div>\n        <div className=\"p-col-12\">\n          <label htmlFor=\"containsText\">{\"Contiene:\"}</label>\n          <InputText\n            placeholder=\"La descripción contiene\"\n            id=\"containsText\"\n            onChange={(e) =>\n              handleProductsSearchOptionsChange(\"containsText\", e.target.value)\n            }\n            value={productsSearchOptions.containsText || \"\"}\n          />\n        </div>\n\n        <div className=\"p-col-6\">\n          <LoadingButton\n            label=\"Aplicar filtros\"\n            icon=\"fa fa-fw fa-check\"\n            loading={loading}\n            onClick={handleApplyFilters}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  const renderProductsPreview = () => {\n    return (\n      <SearchProductsTable\n        onPageEvent={handlePageChange}\n        emptyMessage=\"Aplique filtros para visualizar los productos\"\n        rows={5}\n        totalRecords={totalResults}\n        products={filteredProducts}\n        showAdditionalColumns={true}\n      />\n    )\n  }\n\n  const renderUpdateParametersSection = () => {\n    const { updateCost, costPercent, updatePercents } = updateOptions\n\n    return (\n      <div className=\"p-grid p-fluid\">\n        {showAddPercentDialog && renderAddPercentDialog()}\n        <div className=\"p-col-6\">\n          <label htmlFor=\"updateCostField\">{\"Actualizar costo:\"}</label>\n          <div className=\"p-inputgroup\">\n            <span className=\"p-inputgroup-addon\">\n              <Checkbox\n                id=\"updateCost\"\n                onChange={(e) => {\n                  handleUpdateOptionsChange(\"updateCost\", e.checked)\n                }}\n                tooltip={\"Habilita la actualización del costo\"}\n                checked={updateCost}\n              />\n            </span>\n            <InputNumber\n              id=\"updateCostField\"\n              placeholder=\"Costo\"\n              maxFractionDigits={4}\n              minFractionDigits={2}\n              prefix=\"%\"\n              showButtons\n              mode=\"decimal\"\n              disabled={!updateCost}\n              value={costPercent}\n              onChange={(e) => {\n                handleUpdateOptionsChange(\"costPercent\", e.value)\n              }}\n            />\n          </div>\n        </div>\n\n        <div className=\"p-col-6\" />\n\n        <div className=\"p-col-6\">\n          <label htmlFor=\"updatePercent\">{\"Actualizar porcentajes:\"}</label>\n          <Checkbox\n            id=\"updatePercent\"\n            onChange={(e) => {\n              handleUpdateOptionsChange(\"updatePercents\", e.checked)\n            }}\n            tooltip={\"Habilita la actualización de porcentajes\"}\n            checked={updatePercents}\n          />\n        </div>\n\n        <div className=\"p-col-12\">\n          <Button\n            label=\"Agregar porcentaje\"\n            icon=\"fa fa-fw fa-plus\"\n            disabled={!updatePercents}\n            onClick={() => setShowAddPercentDialog(true)}\n          />\n        </div>\n        <div className=\"p-col-6\">\n          {renderPercentsTable(\"Para agregar\", \"percentsToAdd\")}\n        </div>\n        <div className=\"p-col-6\">\n          {renderPercentsTable(\"Para borrar\", \"percentsToDelete\")}\n        </div>\n\n        <div className=\"p-col-6\">\n          <LoadingButton\n            label=\"Aplicar cambios\"\n            icon=\"fa fa-fw fa-calculator\"\n            className=\"p-button-success\"\n            disabled={!(updateCost || updatePercents)}\n            loading={updatingPrices}\n            onClick={handleApplyChanges}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  const renderAddPercentDialog = () => {\n    return (\n      <AddPercentDialog\n        visible={showAddPercentDialog}\n        modal={true}\n        acceptCallback={handleAddPercent}\n        onHide={() => setShowAddPercentDialog(false)}\n      />\n    )\n  }\n\n  const handleAddPercent = (percent) => {\n    let percentItem = { ...percent }\n\n    percentItem.item = uuid()\n    if (percentItem.action === \"add\") {\n      updateOptions.percentsToAdd.splice(0, 0, percentItem)\n    } else {\n      updateOptions.percentsToDelete.splice(0, 0, percentItem)\n    }\n\n    setUpdateOptions(updateOptions)\n  }\n\n  const handleProductsSearchOptionsChange = (property, value) => {\n    let newProductsSearchOptions = { ...productsSearchOptions }\n\n    newProductsSearchOptions[property] = value\n\n    if (property === \"category\") {\n      newProductsSearchOptions.subCategory = null\n    }\n\n    setProductsSearchOptions(newProductsSearchOptions)\n  }\n\n  const handleUpdateOptionsChange = (property, value) => {\n    let newUpdateOptions = { ...updateOptions }\n\n    newUpdateOptions[property] = value\n\n    setUpdateOptions(newUpdateOptions)\n  }\n\n  const handleApplyFilters = () => {\n    let searchOptions = {\n      firstResult: 0,\n      maxResults: 5,\n      searchFilter: getSearchFilter(),\n    }\n\n    productsService.searchProducts(searchOptions, (response) => {\n      setFilteredProducts(response.data)\n      setTotalResults(response.totalResults)\n      setLoading(false)\n    })\n\n    setLoading(false)\n  }\n\n  const handlePageChange = (pageOptions) => {\n    let searchOptions = {\n      firstResult: pageOptions.firstResult,\n      maxResults: 5,\n      searchFilter: getSearchFilter(),\n    }\n\n    productsService.searchProducts(searchOptions, (response) => {\n      setFilteredProducts(response.data)\n      setTotalResults(response.totalResults)\n    })\n  }\n\n  const getSearchFilter = () => {\n    return {\n      activo: true,\n      idTipoProveeduria: _.get(\n        productsSearchOptions,\n        \"supplyType.supplyTypeId\",\n        null\n      ),\n      idRubro: _.get(productsSearchOptions, \"category.categoryId\", null),\n      idSubRubro: _.get(productsSearchOptions, \"subCategory.subCategoryId\", null),\n      idMarca: _.get(productsSearchOptions, \"brand.brandId\", null),\n      idProveedorHabitual: _.get(productsSearchOptions, \"supplier.personId\", null),\n      txt: productsSearchOptions.containsText,\n      sortFields: [\n        {\n          fieldName: \"descripcion\",\n          ascending: true,\n        },\n      ],\n    }\n  }\n\n  const handleApplyChanges = () => {\n    setUpdatingPrices(true)\n\n    updateOptions.searchFilter = getSearchFilter()\n\n    productsService.updateProductsPricing(updateOptions, handleSuccess, handleError)\n  }\n\n  const handleSuccess = () => {\n    setUpdatingPrices(false)\n    let newUdateOptions = { ...updateOptions }\n    newUdateOptions.updatePercents = false\n    newUdateOptions.updateCost = false\n    setUpdateOptions(newUdateOptions)\n\n    toast.current.show({\n      severity: \"info\",\n      summary: \"Los precios serán actualizados en segundo plano.\",\n      detail: \"\",\n    })\n  }\n\n  const handleError = (error) => {\n    setUpdatingPrices(false)\n\n    toast.current.show({\n      severity: \"error\",\n      summary: \"No se pudieron actualizar los precios\",\n      detail: _.get(error, \"response.data.message\", \"\"),\n    })\n  }\n\n  const renderPercentsTable = (header, percentsProperty) => {\n    const percents = updateOptions[percentsProperty]\n\n    return (\n      <DataTable\n        header={header}\n        value={percents}\n        resizableColumns={true}\n        responsive={true}\n      >\n        <Column field=\"percentType.displayName\" header=\"Tipo\" />\n        <Column field=\"value\" header=\"Valor\" />\n        <Column\n          key=\"actions\"\n          body={(rowData) => getRemoveAction(rowData, percentsProperty)}\n          style={{ textAlign: \"center\", width: \"7em\" }}\n        />\n      </DataTable>\n    )\n  }\n\n  const getRemoveAction = (rowData, percentsProperty) => {\n    return (\n      <Button\n        type=\"button\"\n        icon=\"fa fa-fw fa-trash\"\n        className=\"p-button-danger\"\n        onClick={() => removePercent(rowData, percentsProperty)}\n        tooltip={\"Quitar ítem\"}\n      />\n    )\n  }\n\n  const removePercent = (rowData, percentsProperty) => {\n    let newUpdateOptions = { ...updateOptions }\n    let percents = newUpdateOptions[percentsProperty]\n\n    _.remove(percents, (item) => {\n      return item.item === rowData.item\n    })\n    setUpdateOptions(newUpdateOptions)\n  }\n\n  return (\n    <div className=\"card card-w-title\">\n      <h1>Actualización masiva de precios</h1>\n      <Toast ref={toast} />\n      {renderFilterSection()}\n      {renderProductsPreview()}\n      <h3>Productos a modificar: {totalResults}</h3>\n\n      <div className=\"SeparatorFull\" />\n      {totalResults > 0 && renderUpdateParametersSection()}\n    </div>\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/stock/ProductHistory.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/sale/SearchSales.js",["341"],"import _ from \"lodash\"\nimport React, { Component } from \"react\"\nimport { Toast } from \"primereact/toast\"\nimport { Column } from \"primereact/column\"\nimport { DataTable } from \"primereact/datatable\"\nimport { DEFAULT_DATA_TABLE_PROPS } from \"../DefaultProps\"\nimport { Button } from \"primereact/button\"\nimport FileOutputsService from \"../../service/FileOutputsService\"\nimport { LoadingButton } from \"../core/LoadingButton\"\nimport {\n  formatDate,\n  getBeginOfToday,\n  getEndOfToday,\n  serializeDate,\n} from \"../../utils/DateUtils\"\nimport { Calendar } from \"primereact/calendar\"\nimport { SalesService } from \"../../service/SalesService\"\nimport { TabPanel, TabView } from \"primereact/tabview\"\nimport ShopCartService from \"../../service/ShopCartService\"\nimport { MultiSelect } from \"primereact/multiselect\"\nimport { AutoComplete } from \"primereact/autocomplete\"\nimport { TriStateCheckbox } from \"primereact/tristatecheckbox\"\nimport LoginService from \"../../service/LoginService\"\nimport { exportToExcel } from \"./ExportSalesUtils\"\nimport { InvoicePrintSplitButton } from \"../core/InvoicePrintSplitButton\"\nimport { BudgetPrintSplitButton } from \"../core/BudgetPrintSplitButton\"\n\nexport class SearchSales extends Component {\n  constructor(props, context) {\n    super(props, context)\n\n    this.state = {\n      sales: [],\n      invoicedTotal: 0,\n      notInvoicedTotal: 0,\n\n      saleTypes: [],\n      filteredCustomers: [],\n      loading: false,\n\n      fromDate: getBeginOfToday(),\n      toDate: getEndOfToday(),\n      selectedSaleTypes: [],\n      selectedCustomer: null,\n      facturada: null,\n\n      rows: 10,\n      first: 0,\n      totalRecords: 0,\n      adminUser: LoginService.hasUserRole(\"ADMINISTRADORES\"),\n    }\n\n    this.salesService = new SalesService()\n  }\n\n  componentDidMount() {\n    const { saleTypes } = this.state\n\n    if (saleTypes.length === 0) {\n      ShopCartService.getSaleTypes((saleTypes) =>\n        this.setState({ saleTypes: saleTypes })\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"card card-w-title\">\n        <Toast ref={(el) => (this.toast = el)} />\n        <h1>Búsqueda de comprobantes</h1>\n        <div className=\"p-grid p-fluid\">\n          <div className=\"p-col-12\">\n            <TabView>\n              <TabPanel header=\"Búsqueda estándar\" leftIcon=\"fa fa-fw fa-search\">\n                <div className=\"p-grid p-fluid\">\n                  <div className=\"p-col-4\">\n                    <label htmlFor=\"fromDate\">Fecha desde:</label>\n                    <Calendar\n                      id=\"fromDate\"\n                      showTime={true}\n                      showIcon={true}\n                      hourFormat=\"24\"\n                      dateFormat=\"dd/mm/yy\"\n                      value={this.state.fromDate}\n                      onChange={(e) => this.setState({ fromDate: e.value })}\n                    />\n                  </div>\n\n                  <div className=\"p-col-4\">\n                    <label htmlFor=\"toDate\">Fecha hasta:</label>\n                    <Calendar\n                      id=\"toDate\"\n                      showTime={true}\n                      showIcon={true}\n                      hourFormat=\"24\"\n                      dateFormat=\"dd/mm/yy\"\n                      value={this.state.toDate}\n                      onChange={(e) => this.setState({ toDate: e.value })}\n                    />\n                  </div>\n\n                  <div className=\"p-col-4\">\n                    <label htmlFor=\"saleTypes\">Tipos de comprobante: </label>\n                    <MultiSelect\n                      id=\"saleTypes\"\n                      optionLabel=\"nombreComprobante\"\n                      options={this.state.saleTypes}\n                      value={this.state.selectedSaleTypes}\n                      onChange={(event) => {\n                        this.setState({ selectedSaleTypes: event.value })\n                      }}\n                    />\n                  </div>\n                </div>\n              </TabPanel>\n              <TabPanel header=\"Búsqueda avanzada\" leftIcon=\"fa fa-fw fa-cog\">\n                <div className=\"p-col-4\">\n                  <label htmlFor=\"clienteFilter\">Cliente:</label>\n                  <AutoComplete\n                    minLength={2}\n                    placeholder=\"Comience a escribir para buscar un cliente\"\n                    delay={500}\n                    id=\"clienteFilter\"\n                    completeMethod={(event) => this.filterCustomers(event.query)}\n                    suggestions={this.state.filteredCustomers}\n                    field=\"businessName\"\n                    onChange={(event) =>\n                      this.setState({ selectedCustomer: event.value })\n                    }\n                    value={this.state.selectedCustomer || \"\"}\n                  />\n                </div>\n                <div className=\"p-col-4\">\n                  <label htmlFor=\"invoiceStatusFilter\">Facturada:</label>\n                  <TriStateCheckbox\n                    id=\"invoiceStatusFilter\"\n                    tooltip={this.getInvoiceFilterStatus()}\n                    value={this.state.facturada}\n                    onChange={(e) => this.setState({ facturada: e.value })}\n                  />\n                </div>\n              </TabPanel>\n            </TabView>\n          </div>\n\n          <LoadingButton\n            type=\"button\"\n            icon=\"fa fa-fw fa-filter\"\n            label={\"Buscar comprobantes\"}\n            className=\"p-button-success\"\n            onClick={() => this.filterSales(0)}\n            loading={this.state.loading}\n            tooltip={\"Buscar comprobantes\"}\n          />\n\n          <DataTable {...this.getItemsTableProps()}>\n            <Column\n              header={\"Fecha\"}\n              body={(rowData) => {\n                return formatDate(rowData.saleDate)\n              }}\n            />\n            <Column header={\"Tipo\"} field={\"saleType\"} />\n            <Column header={\"Cliente\"} field={\"customer\"} />\n            <Column header={\"Factura\"} field={\"invoiceNumber\"} />\n            <Column header={\"Vendedor\"} field={\"user\"} />\n            <Column header={\"Sucursal\"} field={\"branch\"} />\n            <Column header={\"Total\"} field={\"total\"} />\n            <Column header={\"Condición\"} field={\"saleCondition\"} />\n            <Column header={\"Imprimir\"} body={this.getLinkActions} />\n          </DataTable>\n\n          {this.renderTotalsSection()}\n        </div>\n      </div>\n    )\n  }\n\n  renderTotalsSection = () => {\n    const { adminUser } = this.state\n    let sectionToRender = null\n\n    if (adminUser) {\n      sectionToRender = (\n        <div className=\"p-col-12\">\n          <div className=\"p-col-4\">\n            <label htmlFor=\"invoicedTotal\">Total facturado:</label>\n            <label style={{ fontWeight: \"bold\" }}>\n              $ {this.state.invoicedTotal.toLocaleString()}\n            </label>\n          </div>\n          <div className=\"p-col-4\">\n            <label htmlFor=\"invoicedTotal\">Total pendiente:</label>\n            <label style={{ fontWeight: \"bold\" }}>\n              $ {this.state.notInvoicedTotal.toLocaleString()}\n            </label>\n          </div>\n          <div className=\"p-col-4\">\n            <label htmlFor=\"invoicedTotal\">Total:</label>\n            <label style={{ fontWeight: \"bold\" }}>\n              ${\" \"}\n              {(\n                this.state.notInvoicedTotal + this.state.invoicedTotal\n              ).toLocaleString()}\n            </label>\n          </div>\n        </div>\n      )\n    }\n\n    return sectionToRender\n  }\n\n  getItemsTableProps = () => {\n    const { sales, rows, first, totalRecords, loading } = this.state\n    const header = <div className=\"p-clearfix\">Comprobantes</div>\n    const footer = (\n      <div className=\"p-clearfix\">\n        <Button\n          type=\"button\"\n          icon=\"fa fa-fw fa-file-excel\"\n          onClick={this.exportToExcel}\n        />\n        <label>Comprobantes: {totalRecords}</label>\n      </div>\n    )\n\n    return {\n      ...DEFAULT_DATA_TABLE_PROPS,\n      ...{\n        value: sales,\n        loading: loading,\n        header: header,\n        footer: footer,\n        rows: rows,\n        totalRecords: totalRecords,\n        lazy: true,\n        first: first,\n        onPage: this.onPageEvent,\n        resizableColumns: true,\n        emptyMessage: \"No hay comprobantes que coincidan con la búsqueda\",\n      },\n    }\n  }\n\n  getInvoiceFilterStatus = () => {\n    let status = \"\"\n\n    if (this.state.facturada === true) {\n      status = \"Sí\"\n    } else if (this.state.facturada === false) {\n      status = \"No\"\n    }\n\n    return status\n  }\n\n  getLinkActions = (rowData) => {\n    let viewSaleButton = (\n      <Button\n        type=\"button\"\n        icon=\"fa fa-fw fa-search\"\n        label={`${rowData.saleId}`}\n        tooltip={\"Ver comprobante\"}\n        onClick={() => (window.location = `#/sale/${rowData.saleId}`)}\n      />\n    )\n    let buttonToRender = <BudgetPrintSplitButton saleId={rowData.saleId} />\n\n    if (rowData.invoiceNumber) {\n      buttonToRender = <InvoicePrintSplitButton saleId={rowData.saleId} />\n    }\n\n    return (\n      <div>\n        {viewSaleButton}\n        {buttonToRender}\n      </div>\n    )\n  }\n\n  onPageEvent = (event) => {\n    this.filterSales(event.first)\n  }\n\n  filterSales = (first) => {\n    let searchOptions = this.getPaginatedSearchOptions(first)\n\n    this.salesService.searchSales(\n      searchOptions,\n      (sales) =>\n        this.setState({\n          loading: false,\n          sales: sales.data,\n          first: searchOptions.firstResult,\n          totalRecords: sales.totalResults,\n        }),\n      this.handleSearchError\n    )\n\n    if (this.state.adminUser && first === 0) {\n      this.salesService.getSalesTotals(searchOptions.searchFilter, (totals) =>\n        this.setState({\n          invoicedTotal: totals.invoicedTotal,\n          notInvoicedTotal: totals.notInvoicedTotal,\n        })\n      )\n    }\n    this.setState({ loading: true })\n  }\n\n  getPaginatedSearchOptions = (first) => {\n    const {\n      fromDate,\n      toDate,\n      rows,\n      selectedSaleTypes,\n      selectedCustomer,\n      facturada,\n    } = this.state\n\n    return {\n      firstResult: first || 0,\n      maxResults: rows,\n      searchFilter: {\n        fechaVentaDesde: serializeDate(fromDate),\n        fechaVentaHasta: serializeDate(toDate),\n        idTiposComprobanteList: selectedSaleTypes.map((saleType) => {\n          return saleType.id\n        }),\n        idPersona: _.get(selectedCustomer, \"customerId\", null),\n        facturada: facturada,\n      },\n    }\n  }\n\n  filterCustomers = (query) => {\n    ShopCartService.searchCustomers(query, (customers) => {\n      this.setState({ filteredCustomers: customers })\n    })\n  }\n\n  exportToExcel = () => {\n    const { totalRecords } = this.state\n\n    if (totalRecords) {\n      let searchOptions = this.getPaginatedSearchOptions(0)\n      searchOptions.maxResults = totalRecords\n\n      this.salesService.searchSales(\n        searchOptions,\n        (sales) => exportToExcel(sales.data),\n        this.handleSearchError\n      )\n    }\n  }\n\n  handleSearchError = (error) => {\n    this.toast.show({\n      severity: \"error\",\n      summary: \"No se pudo realizar la búsqueda\",\n      detail: _.get(error, \"response.data.message\", \"\"),\n    })\n    this.setState({ loading: false })\n  }\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/sale/ViewSale.js",["342","343","344"],"import React, { useEffect, useRef, useState } from \"react\"\nimport { Toast } from \"primereact/toast\"\nimport { SalesService } from \"../../service/SalesService\"\nimport _ from \"lodash\"\nimport { DataTable } from \"primereact/datatable\"\nimport { Column } from \"primereact/column\"\nimport { formatDate } from \"../../utils/DateUtils\"\nimport { Button } from \"primereact/button\"\nimport { InvoiceDialog } from \"./InvoiceDialog\"\nimport FileOutputsService from \"../../service/FileOutputsService\"\nimport { InvoicePrintSplitButton } from \"../core/InvoicePrintSplitButton\"\nimport { BudgetPrintSplitButton } from \"../core/BudgetPrintSplitButton\"\n\nexport const ViewSale = (props) => {\n  const salesService = new SalesService()\n\n  const [saleId] = useState(props.match.params.saleId)\n  const [sale, setSale] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [showInvoiceDialog, setShowInvoiceDialog] = useState(false)\n\n  const toast = useRef(null)\n\n  useEffect(\n    () => salesService.getSale(saleId, handleGetSale, handleGetSaleError),\n    [saleId]\n  )\n\n  const handleGetSale = (saleInfo) => {\n    setSale(saleInfo)\n    setLoading(false)\n  }\n\n  const renderSaleInformation = () => {\n    return (\n      <>\n        <div className=\"p-col-12 p-lg-4\">\n          <label>Cliente:</label>\n          <label style={{ fontWeight: \"bold\" }}>{sale.customer}</label>\n        </div>\n        <div className=\"p-col-12 p-lg-4\">\n          <label>Fecha:</label>\n          <label style={{ fontWeight: \"bold\" }}>{formatDate(sale.saleDate)}</label>\n        </div>\n        <div className=\"p-col-12 p-lg-4\">\n          <label>Vendedor:</label>\n          <label style={{ fontWeight: \"bold\" }}>{sale.user}</label>\n        </div>\n        <div className=\"p-col-12 p-lg-4\">\n          <label>Sucursal:</label>\n          <label style={{ fontWeight: \"bold\" }}>{sale.branch}</label>\n        </div>\n        <div className=\"p-col-12 p-lg-4\">\n          <label>Tipo:</label>\n          <label style={{ fontWeight: \"bold\" }}>{sale.saleType}</label>\n        </div>\n\n        <div className=\"p-col-12 p-lg-4\">\n          <label>Condición:</label>\n          <label style={{ fontWeight: \"bold\" }}>{sale.saleCondition}</label>\n        </div>\n\n        <div className=\"p-col-12 p-lg-4\">\n          <label>Factura:</label>\n          <label style={{ fontWeight: \"bold\" }}>{sale.invoiceNumber}</label>\n        </div>\n\n        <div className=\"p-col-12\">{renderSaleItems()}</div>\n\n        <div className=\"p-col-12 p-lg-6\">\n          <label>Total:</label>\n          <label style={{ fontWeight: \"bold\" }}>\n            $ {sale.total.toLocaleString()}\n          </label>\n        </div>\n        <div className=\"p-col-12 p-lg-6\">\n          <label>Saldo:</label>\n          <label style={{ fontWeight: \"bold\" }}>\n            $ {sale.remainingAmount.toLocaleString()}\n          </label>\n        </div>\n\n        <div className=\"p-col-12 p-lg-4\">\n          <label>Observaciones:</label>\n          <label style={{ fontWeight: \"bold\" }}>{sale.observations}</label>\n        </div>\n        <div className=\"p-col-12 p-lg-2\">\n          <label>Remitente:</label>\n          <label style={{ fontWeight: \"bold\" }}>{sale.remitente}</label>\n        </div>\n        <div className=\"p-col-12 p-lg-2\">\n          <label>Remito:</label>\n          <label style={{ fontWeight: \"bold\" }}>{sale.remito}</label>\n        </div>\n      </>\n    )\n  }\n\n  const renderSaleItems = () => {\n    return (\n      <DataTable value={sale.details} rows={8} paginator={true}>\n        <Column field=\"productCode\" header=\"Código\" />\n        <Column field=\"description\" header=\"Descricpción\" />\n        <Column field=\"saleUnit\" header=\"Un. Venta\" />\n        <Column field=\"quantity\" header=\"Cantidad\" />\n        <Column field=\"subTotal\" header=\"SubTotal\" />\n      </DataTable>\n    )\n  }\n\n  const renderActions = () => {\n    let buttonToRender\n\n    if (sale.invoiceNumber) {\n      buttonToRender = <InvoicePrintSplitButton saleId={sale.saleId} />\n    } else {\n      buttonToRender = (\n        <Button\n          type=\"button\"\n          icon=\"fa fa-fw fa-print\"\n          label={\"Facturar\"}\n          className=\"p-button-success\"\n          onClick={() => setShowInvoiceDialog(true)}\n          tooltip={\"Abre el cuadro de diálogo para facturar el comprobante actual\"}\n        />\n      )\n    }\n\n    return buttonToRender\n  }\n\n  const renderInvoiceDialog = () => {\n    return (\n      <InvoiceDialog\n        visible={showInvoiceDialog}\n        currentSale={sale}\n        successCallback={handleInvoice}\n        onHide={() => setShowInvoiceDialog(false)}\n      />\n    )\n  }\n\n  const getPlaceholder = () => {\n    return <span className=\"fa fa-spinner fa-spin fa-3x\" />\n  }\n\n  const handleGetSaleError = (error) => {\n    toast.current.show({\n      severity: \"error\",\n      summary: \"No se pudo encontrar el comprobante\",\n      detail: _.get(error, \"response.data.message\", \"\"),\n    })\n  }\n\n  const handleInvoice = (createdInvoice) => {\n    toast.current.show({\n      severity: \"info\",\n      summary: `Factura ${createdInvoice.invoiceNumber} generada exitosamente`,\n    })\n\n    setLoading(true)\n\n    salesService.getSale(\n      saleId,\n      (saleInfo) => {\n        setSale(saleInfo)\n        setLoading(false)\n        setShowInvoiceDialog(false)\n      },\n      handleGetSaleError\n    )\n  }\n\n  return (\n    <div className=\"card card-w-title\">\n      <Toast ref={toast} />\n      <h1>Vista de comprobante: {saleId}</h1>\n      <div className=\"p-grid p-fluid\">\n        {loading && getPlaceholder()}\n        {!loading && renderSaleInformation()}\n\n        {!loading && renderActions()}\n        {!loading && renderInvoiceDialog()}\n      </div>\n    </div>\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/report/SalesByProductReport.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/payment/SearchPendingSales.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/fiscal/FiscalBooks.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/products/ProductsInventory.js",["345"],"import _ from \"lodash\"\nimport React, { useState } from \"react\"\nimport { ProductsService } from \"../../service/ProductsService\"\nimport { SearchProductsFilter } from \"../core/SearchProductsFilter\"\nimport { DataTable } from \"primereact/datatable\"\nimport { Column } from \"primereact/column\"\nimport { formatDate } from \"../../utils/DateUtils\"\nimport { Button } from \"primereact/button\"\n\nconst productColumns = [\n  { field: \"codigoPropio\", header: \"Código\" },\n  { field: \"codigoFabricante\", header: \"Cód. Fab.\" },\n  { field: \"descripcion\", header: \"Descripción\", style: { width: \"30%\" } },\n  { field: \"brand.brandName\", header: \"Marca\" },\n  { field: \"costoAdquisicion\", header: \"Costo Bruto\" },\n  { field: \"costoFinal\", header: \"Costo Neto\" },\n  { field: \"precioVenta\", header: \"Precio\", style: { fontWeight: \"bold\" } },\n  { field: \"saleUnit\", header: \"Unidad\" },\n  { field: \"stockActual\", header: \"Stock Total\" },\n  {\n    field: \"fechaUltimaModificacion\",\n    header: \"Fecha Ult. Modif.\",\n    format: function (rowData) {\n      return formatDate(rowData)\n    },\n  },\n]\n\nexport const ProductsInventory = () => {\n  const productsService = new ProductsService()\n\n  const [loading, setLoading] = useState(false)\n  const [rows, setRows] = useState(20)\n  const [first, setFirst] = useState(0)\n  const [totalRecords, setTotalRecords] = useState(0)\n  const [selectedIds, setSelectedIds] = useState(new Map())\n  const [products, setProducts] = useState([])\n  const [searchFilter, setSearchFilter] = useState(null)\n\n  const renderFilterSection = () => {\n    return (\n      <SearchProductsFilter\n        searchProductsCallback={searchProducts}\n        loading={loading}\n      />\n    )\n  }\n\n  const renderSearchResults = () => {\n    return (\n      <DataTable\n        value={products}\n        dataKey={\"productId\"}\n        paginator={true}\n        rows={rows}\n        totalRecords={totalRecords}\n        lazy={true}\n        first={first}\n        rowClassName={getRowClass}\n        onPage={onPageEvent}\n        loading={loading}\n        loadingIcon=\"fa fa-fw fa-spin fa-spinner\"\n        resizableColumns\n      >\n        {renderColumns()}\n      </DataTable>\n    )\n  }\n\n  const getRowClass = (product) => {\n    return { \"p-highlight\": selectedIds.get(product.productId) }\n  }\n\n  const renderColumns = () => {\n    let columns = productColumns.map((col, i) => {\n      return (\n        <Column\n          key={col.field}\n          field={col.field}\n          header={col.header}\n          style={col.style}\n          body={(rowData) => getColumnBody(col, rowData)}\n        />\n      )\n    })\n\n    columns.push(<Column body={getLinkActions} />)\n\n    return columns\n  }\n\n  const searchProducts = (searchFilter) => {\n    if (!loading) {\n      let searchOptions = {\n        firstResult: 0,\n        maxResults: rows,\n        searchFilter: searchFilter,\n      }\n\n      productsService.searchProducts(searchOptions, handleSuccess, handleError)\n\n      setLoading(true)\n      setFirst(0)\n      setSearchFilter(searchFilter)\n    }\n  }\n\n  const onPageEvent = (event) => {\n    let searchOptions = {\n      firstResult: event.first,\n      maxResults: rows,\n      searchFilter: searchFilter,\n    }\n\n    productsService.searchProducts(searchOptions, handleSuccess, handleError)\n\n    setLoading(true)\n    setFirst(event.first)\n  }\n\n  const handleSuccess = (data) => {\n    const foundProducts = data.data\n    const totalRows = data.totalResults\n\n    setProducts(foundProducts)\n    setTotalRecords(totalRows)\n    setLoading(false)\n  }\n\n  const handleError = (errorData) => {\n    setProducts([])\n    setTotalRecords(0)\n    setLoading(false)\n  }\n\n  const getColumnBody = (col, rowData) => {\n    const field = _.get(rowData, col.field)\n\n    if (col.format) {\n      return col.format(field)\n    }\n\n    return field\n  }\n\n  const getLinkActions = (rowData) => {\n    const { productId } = rowData\n\n    return (\n      <Button\n        type=\"button\"\n        icon=\"fa fa-fw fa-edit\"\n        onClick={() => handleEditProduct(productId)}\n      />\n    )\n  }\n\n  const handleEditProduct = (productId) => {\n    let newSelectedIds = new Map(selectedIds)\n\n    newSelectedIds.set(productId, true)\n\n    setSelectedIds(newSelectedIds)\n\n    window.open(`#/product/${productId}`, \"_blank\")\n  }\n\n  return (\n    <div className=\"card card-w-title\">\n      <h1>Mayor de productos</h1>\n      {renderFilterSection()}\n      <Button\n        type=\"button\"\n        label={\"Nuevo\"}\n        icon=\"fa fa-fw fa-plus\"\n        onClick={() => window.open(`#/product/`, \"_blank\")}\n      />\n      {renderSearchResults()}\n    </div>\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/ProductsService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/FiscalBookService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/payment/PayDialog.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/PaymentPendingSalesService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/ShopCartService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/LoadingButton.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/SearchProductsFilter.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/utils/DateUtils.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/FileOutputsService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/DefaultProps.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/ReportsService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/sale/InvoiceDialog.js",["346"],"import React, { useEffect, useRef, useState } from \"react\"\nimport { Dialog } from \"primereact/dialog\"\nimport { SalesService } from \"../../service/SalesService\"\nimport { Dropdown } from \"primereact/dropdown\"\nimport { LoadingButton } from \"../core/LoadingButton\"\nimport _ from \"lodash\"\nimport { Toast } from \"primereact/toast\"\n\nexport const InvoiceDialog = (props) => {\n  const salesService = new SalesService()\n\n  const [sale] = useState(props?.currentSale)\n  const [loading, setLoading] = useState(false)\n  const [pointsOfSale, setPointsOfSale] = useState([])\n  const [selectedPointOfSale, setSelectedPointOfSale] = useState(null)\n\n  useEffect(() => salesService.getPointsOfSale(handlePointsOfSale), [])\n  const toast = useRef(null)\n\n  const getDialogProps = () => {\n    let defaultProps = {\n      header: \"Facturar comprobante\",\n      modal: true,\n    }\n\n    return { ...defaultProps, ...props }\n  }\n\n  const handlePointsOfSale = (pointsOfSale) => {\n    const defaultPos = pointsOfSale.find((pos) => pos.byDefault === true)\n\n    setPointsOfSale(pointsOfSale)\n    setSelectedPointOfSale(defaultPos)\n  }\n\n  const handleRegisterInvoice = () => {\n    setLoading(true)\n\n    const invoiceToRegister = {\n      saleId: sale.saleId,\n      pointOfSale: selectedPointOfSale.posNumber,\n      invoiceDate: null,\n      invoiceNumber: null,\n    }\n\n    salesService.registerInvoice(invoiceToRegister, handleSuccess, handleError)\n  }\n\n  const handleSuccess = (createdInvoice) => {\n    props.successCallback(createdInvoice)\n  }\n\n  const handleError = (error) => {\n    setLoading(false)\n\n    toast.current.show({\n      severity: \"error\",\n      summary: \"No se pudo facturar el comprobante\",\n      detail: _.get(error, \"message\", \"\"),\n    })\n  }\n\n  const renderContent = () => {\n    return (\n      <div>\n        <div className=\"p-grid p-fluid\">\n          <div className=\"p-col-2\">\n            <label htmlFor=\"invoiceCharacter\">Letra:</label>\n            <label id=\"invoiceCharacter\" style={{ fontWeight: \"bold\" }}>\n              {sale.invoiceChar}\n            </label>\n          </div>\n          <div className=\"p-col-10\">\n            <label htmlFor=\"pointOfSale\">Punto de venta:</label>\n            <Dropdown\n              id=\"pointOfSale\"\n              value={selectedPointOfSale}\n              options={pointsOfSale}\n              optionLabel=\"displayName\"\n              onChange={(event) => setSelectedPointOfSale(event.value)}\n            />\n          </div>\n\n          <LoadingButton\n            loading={loading}\n            label=\"Facturar\"\n            disabled={selectedPointOfSale === null}\n            type=\"button\"\n            onClick={handleRegisterInvoice}\n            icon=\"fa fa-fw fa-print\"\n          />\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <Dialog {...getDialogProps()}>\n      <Toast ref={toast} />\n      {renderContent()}\n    </Dialog>\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/SalesService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/payment/CashSaleToPay.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/AutocompleteProductFilter.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/StockService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/DeliveryNotesService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/pricing/AddPercentDialog.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/SearchProductsTable.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/SearchProductsDialog.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/DashboardService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/shop-cart/ShopCartConfirmation.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/shop-cart/ShopCartPayment.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/shop-cart/ShopCartCustomer.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/shop-cart/ShopCartItems.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/stores/ShopCartStore.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/shop-cart/AddNewCustomerDialog.js",[],["347","348"],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/stores/SessionStore.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/SucursalesService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/UsersService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/CustomersService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/custom-error-form.messages.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/utils/StringUtils.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/CategoriesSelector.js",["349"],"import React, { useEffect, useState } from \"react\"\nimport { Dropdown } from \"primereact/dropdown\"\nimport { CategoriesService } from \"../../service/CategoriesService\"\n\nexport const CategoriesSelector = ({ onCategorySelect, selectedCategory }) => {\n  const [currentCategory, setCurrentCategory] = useState(selectedCategory)\n  const [categories, setCategories] = useState([])\n  const service = new CategoriesService()\n\n  useEffect(() => service.getCategories(handleCategories), [])\n  useEffect(() => setCurrentCategory(selectedCategory), [selectedCategory])\n\n  const handleCategories = (values) => {\n    setCategories(values)\n  }\n\n  const handleSelectionChange = (value) => {\n    setCurrentCategory(value)\n\n    if (onCategorySelect) {\n      onCategorySelect(value)\n    }\n  }\n\n  return (\n    <Dropdown\n      id=\"category\"\n      placeholder={\"Rubro\"}\n      filter={true}\n      dataKey=\"categoryId\"\n      options={categories}\n      showClear={true}\n      value={currentCategory}\n      optionLabel=\"displayName\"\n      onChange={(e) => handleSelectionChange(e.value)}\n    />\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/SubCategoriesSelector.js",["350"],"import React, { useEffect, useState } from \"react\"\nimport { Dropdown } from \"primereact/dropdown\"\nimport { CategoriesService } from \"../../service/CategoriesService\"\n\nexport const SubCategoriesSelector = ({\n  onSubCategorySelect,\n  categoryId,\n  selectedSubCategory,\n}) => {\n  const [currentSubCategory, setCurrentSubCategory] = useState(selectedSubCategory)\n  const [subCategories, setSubCategories] = useState([])\n  const service = new CategoriesService()\n\n  useEffect(() => {\n    if (categoryId) {\n      service.getSubCategories(categoryId, handleSubCategories)\n      setCurrentSubCategory(null)\n    }\n  }, [categoryId])\n  useEffect(() => setCurrentSubCategory(selectedSubCategory), [selectedSubCategory])\n\n  const handleSubCategories = (values) => {\n    setSubCategories(values)\n  }\n\n  const handleSelectionChange = (value) => {\n    setCurrentSubCategory(value)\n\n    if (onSubCategorySelect) {\n      onSubCategorySelect(value)\n    }\n  }\n\n  return (\n    <Dropdown\n      id=\"subCategory\"\n      placeholder={\"Sub-Rubro\"}\n      filter={true}\n      dataKey=\"subCategoryId\"\n      options={subCategories}\n      showClear={true}\n      value={currentSubCategory}\n      optionLabel=\"displayName\"\n      onChange={(e) => handleSelectionChange(e.value)}\n    />\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/BrandsSelector.js",["351"],"import React, { useEffect, useState } from \"react\"\nimport { Dropdown } from \"primereact/dropdown\"\nimport { BrandsService } from \"../../service/BrandsService\"\n\nexport const BrandsSelector = ({ selectedBrand, onBrandSelect }) => {\n  const [currentBrand, setCurrentBrand] = useState(selectedBrand)\n  const [brands, setBrands] = useState([])\n  const service = new BrandsService()\n\n  useEffect(() => service.getBrands(handleGetBrands), [])\n  useEffect(() => setCurrentBrand(selectedBrand), [selectedBrand])\n\n  const handleGetBrands = (brands) => {\n    setBrands(brands)\n  }\n\n  const handleSelectionChange = (value) => {\n    setCurrentBrand(value)\n    if (onBrandSelect) {\n      onBrandSelect(value)\n    }\n  }\n\n  return (\n    <Dropdown\n      id=\"brand\"\n      placeholder={\"Marca\"}\n      filter={true}\n      dataKey=\"brandId\"\n      options={brands}\n      showClear={true}\n      value={currentBrand}\n      optionLabel=\"displayName\"\n      onChange={(e) => handleSelectionChange(e.value)}\n    />\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/BrandsService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/AutocompleteSupplierFilter.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/SuppliersService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/CategoriesService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/products/ProductDetails.js",["352","353"],"import _ from \"lodash\"\nimport React, { useEffect, useRef, useState } from \"react\"\nimport { ProductsService } from \"../../service/ProductsService\"\nimport { DataTable } from \"primereact/datatable\"\nimport { Column } from \"primereact/column\"\nimport { Button } from \"primereact/button\"\nimport { Toast } from \"primereact/toast\"\nimport { InputText } from \"primereact/inputtext\"\nimport { Checkbox } from \"primereact/checkbox\"\nimport { InputTextarea } from \"primereact/inputtextarea\"\nimport {\n  fieldRequiredDefaultMessage,\n  invalidPatternMessage,\n} from \"../../custom-error-form.messages\"\nimport { FieldError, Form } from \"react-jsonschema-form-validation\"\nimport Field from \"react-jsonschema-form-validation/dist/Field\"\nimport { FiscalTaxRateSelector } from \"../core/FiscalTaxRateSelector\"\nimport { v4 as uuid } from \"uuid\"\nimport { PercentTypesSelector } from \"../core/PercentTypesSelector\"\nimport { isNotEmpty } from \"../../utils/StringUtils\"\nimport { PriceListSelector } from \"../core/PriceListSelector\"\nimport { LoadingButton } from \"../core/LoadingButton\"\nimport { ProductSupplyTypeSelector } from \"../core/ProductSupplyTypeSelector\"\nimport { CategoriesSelector } from \"../core/CategoriesSelector\"\nimport { SubCategoriesSelector } from \"../core/SubCategoriesSelector\"\nimport { BrandsSelector } from \"../core/BrandsSelector\"\nimport { ProductUnitTypeSelector } from \"../core/ProductUnitTypeSelector\"\nimport { AutocompleteSupplierFilter } from \"../core/AutocompleteSupplierFilter\"\n\nconst productSchema = {\n  type: \"object\",\n  properties: {\n    code: {\n      type: \"string\",\n      minLength: 1,\n      maxLength: 11,\n      pattern: \"^[A-Z0-9-._/]*$\",\n    },\n    description: { type: \"string\", maxLength: 200 },\n    factoryCode: { type: \"string\", maxLength: 60 },\n    observations: { type: \"string\", maxLength: 2048 },\n    location: { type: \"string\", maxLength: 60 },\n    grossCost: { pattern: \"^(-)?(?!0\\\\d)\\\\d*(\\\\.\\\\d{1,4})?$\" },\n    purchaseUnitsToSaleUnitEquivalence: { pattern: \"^(?!0\\\\d)\\\\d*(\\\\.\\\\d{1,2})?$\" },\n    fiscalTaxRate: { type: \"object\" },\n    salePrices: { type: \"array\" },\n    percentages: { type: \"array\" },\n    supplyType: { type: \"object\" },\n    category: { type: \"object\" },\n    subCategory: { type: \"object\" },\n    brand: { type: \"object\" },\n    purchaseUnit: { type: \"object\" },\n    saleUnit: { type: \"object\" },\n    regularSupplier: { type: \"object\" },\n    minimumStock: { pattern: \"^(?!0\\\\d)\\\\d*(\\\\.\\\\d{1,2})?$\" },\n  },\n  required: [\n    \"description\",\n    \"code\",\n    \"grossCost\",\n    \"fiscalTaxRate\",\n    \"salePrices\",\n    \"supplyType\",\n    \"category\",\n    \"subCategory\",\n    \"brand\",\n    \"purchaseUnitsToSaleUnitEquivalence\",\n    \"purchaseUnit\",\n    \"saleUnit\",\n    \"minimumStock\",\n  ],\n}\n\nconst NEW_PRODUCT = {\n  productId: null,\n  code: \"\",\n  description: \"\",\n  factoryCode: \"\",\n  observations: \"\",\n  location: \"\",\n  grossCost: 0,\n  purchaseUnitsToSaleUnitEquivalence: 1,\n  fiscalTaxRate: null,\n  salePrices: [],\n  percentages: [],\n  supplyType: null,\n  category: null,\n  subCategory: null,\n  brand: null,\n  purchaseUnit: null,\n  saleUnit: null,\n  regularSupplier: null,\n  minimumStock: 0,\n  activo: true,\n}\n\nexport const ProductDetails = (mainProps) => {\n  const productsService = new ProductsService()\n\n  const [loading, setLoading] = useState(false)\n  const [productId, setProductId] = useState(mainProps.match.params.productId)\n  const [editingProduct, setEditingProduct] = useState(null)\n\n  const [formData, setFormData] = useState(NEW_PRODUCT)\n\n  const toast = useRef(null)\n\n  useEffect(() => {\n    if (productId) {\n      productsService.getProduct(\n        productId,\n        handleGetProductInfo,\n        handleGetProductError\n      )\n    }\n  }, [productId])\n\n  const getTitle = () => {\n    if (productId) {\n      return `Edición de producto: ${productId}`\n    }\n    return \"Nuevo producto\"\n  }\n\n  const handleSubmit = () => {\n    setLoading(true)\n\n    if (productId) {\n      productsService.updateProduct(formData, handleSuccess, handleError)\n    } else {\n      productsService.createProduct(formData, handleCreationSuccess, handleError)\n    }\n  }\n\n  const handleSuccess = () => {\n    toast.current.show({\n      severity: \"info\",\n      summary: `El producto ${productId} fue editado exitosamente`,\n    })\n\n    productsService.getProduct(\n      productId,\n      (productInfo) => handleGetProductInfo(productInfo),\n      handleGetProductError\n    )\n  }\n\n  const handleCreationSuccess = (productInfo) => {\n    const { productId } = productInfo\n\n    toast.current.show({\n      severity: \"info\",\n      summary: `El producto ${productId} fue creado exitosamente`,\n    })\n\n    setProductId(productId)\n  }\n\n  const handleError = (error) => {\n    setLoading(false)\n    toast.current.show({\n      severity: \"error\",\n      summary: \"Ocurrió un error al actualizar el producto\",\n      detail: error.message,\n    })\n  }\n  const handleGetProductError = (error) => {\n    toast.current.show({\n      severity: \"error\",\n      summary: `No se ha podido encontrar el producto [${error.errorCode}]`,\n      detail: _.get(error, \"message\", \"\"),\n    })\n  }\n  const renderIdentificationSection = () => {\n    const { description, code, factoryCode, observations, active } = formData\n    return (\n      <div className=\"p-card-body p-fluid p-grid\">\n        <label className=\"p-col-3 \">{\"Id:\"}</label>\n        <div className=\"p-col-9\">{productId}</div>\n        <div className=\"p-col-3\">{\"Código:\"}</div>\n        <div className=\"p-col-9\">\n          <Field\n            id=\"code\"\n            component={InputText}\n            name=\"code\"\n            value={code}\n            onBlur={validateProductCode}\n          />\n          <FieldError name=\"code\" />\n        </div>\n        <div className=\"p-col-3\">{\"Descripción:\"}</div>\n        <div className=\"p-col-9\">\n          <Field\n            id=\"description\"\n            component={InputText}\n            name=\"description\"\n            value={description}\n          />\n          <FieldError name=\"description\" />\n        </div>\n        <div className=\"p-col-3\">{\"Código de fábrica:\"}</div>\n        <div className=\"p-col-9\">\n          <Field\n            id=\"factoryCode\"\n            component={InputText}\n            name=\"factoryCode\"\n            value={factoryCode}\n          />\n          <FieldError name=\"factoryCode\" />\n        </div>\n        <div className=\"p-col-3\">{\"Observaciones:\"}</div>\n        <div className=\"p-col-9\">\n          <Field\n            id=\"observations\"\n            component={InputTextarea}\n            name=\"observations\"\n            value={observations || \"\"}\n          />\n          <FieldError name=\"observations\" />\n        </div>\n\n        <div className=\"p-col-3\">{\"Activo:\"}</div>\n        <div className=\"p-col-9\">\n          <Field id=\"active\" component={Checkbox} name=\"active\" checked={active} />\n        </div>\n      </div>\n    )\n  }\n\n  const renderPricingSection = () => {\n    const { grossCost, fiscalTaxRate, netCost } = formData\n    return (\n      <div className=\"p-card-body p-fluid p-grid\">\n        <div className=\"p-col-3\">{\"Costo Bruto:\"}</div>\n        <div className=\"p-col-3\">\n          <Field\n            id=\"grossCost\"\n            component={InputText}\n            name=\"grossCost\"\n            value={grossCost}\n          />\n          <FieldError name=\"grossCost\" />\n        </div>\n        <div className=\"p-col-3\">{\"Tasa de IVA:\"}</div>\n        <div className=\"p-col-3\">\n          <FiscalTaxRateSelector\n            selectedTaxRate={fiscalTaxRate}\n            onTaxRateSelect={(taxRate) =>\n              handleProductPropertyChange(\"fiscalTaxRate\", taxRate)\n            }\n          />\n          <FieldError name=\"fiscalTaxRate\" />\n        </div>\n        <div className=\"p-col-12\">{renderPercentsTable()}</div>\n        <div className=\"p-col-6\">\n          <label className=\"p-col-3\">{\"Costo Neto:\"}</label>\n          <label className=\"p-col-3\">{netCost}</label>\n        </div>\n        <div className=\"p-col-12\">{renderPricesTable()}</div>\n      </div>\n    )\n  }\n\n  const renderPercentsTable = () => {\n    const { percentages } = formData\n\n    return (\n      <DataTable\n        header={renderPercentTableHeader()}\n        value={percentages}\n        resizableColumns={true}\n        responsive={true}\n        editMode={\"cell\"}\n      >\n        <Column\n          field=\"percentType.displayName\"\n          header=\"Tipo\"\n          editor={(props) => getPercentTypeEditor(props)}\n        />\n        <Column\n          field=\"rate\"\n          header=\"Valor\"\n          editor={(props) => getPercentValueEditor(props)}\n          editorValidator={numberValidator}\n        />\n        <Column\n          key=\"actions\"\n          body={(rowData) => getPercentsTableActions(rowData)}\n          style={{ textAlign: \"center\", width: \"7em\" }}\n        />\n      </DataTable>\n    )\n  }\n\n  const renderPricesTable = () => {\n    const { salePrices } = formData\n\n    return (\n      <DataTable\n        header={renderPriceTableHeader()}\n        value={salePrices}\n        resizableColumns={true}\n        responsive={true}\n        editMode={\"cell\"}\n      >\n        <Column\n          field=\"priceList.displayName\"\n          header=\"Lista\"\n          editor={(props) => getPriceListEditor(props)}\n        />\n        <Column\n          field=\"utility\"\n          header=\"Utilidad\"\n          editor={(props) => getUtilityValueEditor(props)}\n          editorValidator={numberValidator}\n        />\n        <Column field=\"netPrice\" header=\"Precio Neto\" />\n        <Column\n          field=\"finalPrice\"\n          header=\"Precio Final\"\n          editor={(props) => getFinalPriceEditor(props)}\n          editorValidator={numberValidator}\n        />\n        <Column\n          key=\"actions\"\n          body={(rowData) => getPriceTableActions(rowData)}\n          style={{ textAlign: \"center\", width: \"7em\" }}\n        />\n      </DataTable>\n    )\n  }\n\n  const renderClassificationSection = () => {\n    const {\n      supplyType,\n      category,\n      subCategory,\n      brand,\n      saleUnit,\n      purchaseUnit,\n      purchaseUnitsToSaleUnitEquivalence,\n      regularSupplier,\n    } = formData\n\n    return (\n      <div className=\"p-card-body p-fluid p-grid\">\n        <div className=\"p-col-3\">{\"Tipo de producto:\"}</div>\n        <div className=\"p-col-9\">\n          <ProductSupplyTypeSelector\n            selectedSupplyType={supplyType}\n            onSupplyTypeSelect={(supplyType) =>\n              handleProductPropertyChange(\"supplyType\", supplyType)\n            }\n          />\n          <FieldError name=\"supplyType\" />\n        </div>\n\n        <div className=\"p-col-3\">{\"Proveedor habitual:\"}</div>\n        <div className=\"p-col-9\">\n          <AutocompleteSupplierFilter\n            selectedSupplier={regularSupplier}\n            onSupplierSelect={(supplier) =>\n              handleProductPropertyChange(\"regularSupplier\", supplier)\n            }\n          />\n          <FieldError name=\"regularSupplier\" />\n        </div>\n\n        <div className=\"p-col-3\">{\"Rubro:\"}</div>\n        <div className=\"p-col-9\">\n          <CategoriesSelector\n            selectedCategory={category}\n            onCategorySelect={(category) =>\n              handleProductPropertyChange(\"category\", category)\n            }\n          />\n          <FieldError name=\"category\" />\n        </div>\n        <div className=\"p-col-3\">{\"Sub-Rubro:\"}</div>\n        <div className=\"p-col-9\">\n          {category && (\n            <SubCategoriesSelector\n              categoryId={category.categoryId}\n              selectedSubCategory={subCategory}\n              onSubCategorySelect={(subCategory) =>\n                handleProductPropertyChange(\"subCategory\", subCategory)\n              }\n            />\n          )}\n          <FieldError name=\"subCategory\" />\n        </div>\n\n        <div className=\"p-col-3\">{\"Marca:\"}</div>\n        <div className=\"p-col-9\">\n          <BrandsSelector\n            selectedBrand={brand}\n            onBrandSelect={(brand) => handleProductPropertyChange(\"brand\", brand)}\n          />\n          <FieldError name=\"brand\" />\n        </div>\n\n        <div className=\"p-col-3\">{\"Unidad de compra:\"}</div>\n        <div className=\"p-col-9\">\n          <ProductUnitTypeSelector\n            selectedUnitType={purchaseUnit}\n            onSelectUnitType={(purchaseUnit) =>\n              handleProductPropertyChange(\"purchaseUnit\", purchaseUnit)\n            }\n          />\n          <FieldError name=\"purchaseUnit\" />\n        </div>\n\n        <div className=\"p-col-3\">{\"Unidad de venta:\"}</div>\n        <div className=\"p-col-9\">\n          <ProductUnitTypeSelector\n            selectedUnitType={saleUnit}\n            onSelectUnitType={(saleUnit) =>\n              handleProductPropertyChange(\"saleUnit\", saleUnit)\n            }\n          />\n          <FieldError name=\"saleUnit\" />\n        </div>\n\n        <div className=\"p-col-3\">{\"Equivalencia un. compra por un. venta:\"}</div>\n        <div className=\"p-col-3\">\n          <Field\n            id=\"purchaseUnitsToSaleUnitEquivalence\"\n            component={InputText}\n            name=\"purchaseUnitsToSaleUnitEquivalence\"\n            value={purchaseUnitsToSaleUnitEquivalence}\n          />\n          <FieldError name=\"purchaseUnitsToSaleUnitEquivalence\" />\n        </div>\n      </div>\n    )\n  }\n\n  const renderStockSection = () => {\n    const { minimumStock } = formData\n\n    return (\n      <div className=\"p-card-body p-fluid p-grid\">\n        <div className=\"p-col-3\">{\"Stock mínimo:\"}</div>\n        <div className=\"p-col-3\">\n          <Field\n            id=\"minimumStock\"\n            component={InputText}\n            name=\"minimumStock\"\n            value={minimumStock}\n          />\n          <FieldError name=\"minimumStock\" />\n        </div>\n      </div>\n    )\n  }\n\n  const getPercentTypeEditor = (props) => {\n    const { rowData } = props\n\n    return (\n      <PercentTypesSelector\n        selectedItem={rowData[\"percentType\"]}\n        onChange={(percentType) =>\n          handlePercentChange(rowData, \"percentType\", percentType)\n        }\n      />\n    )\n  }\n\n  const getUtilityValueEditor = (props) => {\n    const { rowData } = props\n\n    return (\n      <InputText\n        value={rowData[\"utility\"]}\n        onChange={(e) => handleSalePriceChange(rowData, \"utility\", e.target.value)}\n      />\n    )\n  }\n\n  const getFinalPriceEditor = (props) => {\n    const { rowData } = props\n    const finalPrice = \"finalPrice\"\n\n    return (\n      <InputText\n        value={rowData[finalPrice]}\n        onChange={(e) => handleSalePriceChange(rowData, finalPrice, e.target.value)}\n      />\n    )\n  }\n\n  const getPercentValueEditor = (props) => {\n    const { rowData } = props\n\n    return (\n      <InputText\n        value={rowData[\"rate\"]}\n        onChange={(e) => handlePercentChange(rowData, \"rate\", e.target.value)}\n      />\n    )\n  }\n\n  const handlePercentChange = (percent, field, value) => {\n    let percentages = Object.assign([], formData.percentages)\n    const index = percentages.findIndex((item) => item.uid === percent.uid)\n\n    percentages[index][field] = value\n\n    handleProductPropertyChange(\"percentages\", percentages)\n  }\n\n  const numberValidator = (e) => {\n    const { rowData, field } = e.columnProps\n    const value = String(rowData[field])\n\n    return isNotEmpty(value) && value.match(\"^(-)?(?!0\\\\d)\\\\d*(\\\\.\\\\d{1,4})?$\")\n  }\n\n  const getPercentsTableActions = (rowData) => {\n    return (\n      <div className=\"p-grid p-fluid\">\n        <div className=\"p-col-6\">\n          <Button\n            type=\"button\"\n            icon=\"fa fa-fw fa-trash\"\n            className=\"p-button-danger\"\n            onClick={() => removePercent(rowData)}\n            tooltip={\"Quitar ítem\"}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  const removePercent = (productPercent) => {\n    let percentages = Object.assign([], formData.percentages)\n\n    _.remove(percentages, (item) => {\n      return item.uid === productPercent.uid\n    })\n\n    handleProductPropertyChange(\"percentages\", percentages)\n  }\n\n  const addPercent = () => {\n    let percentages = Object.assign([], formData.percentages)\n    const newPercent = {\n      uid: uuid(),\n      rate: \"\",\n      percentType: { displayName: \"\" },\n    }\n\n    percentages.push(newPercent)\n\n    handleProductPropertyChange(\"percentages\", percentages)\n  }\n\n  const getPriceListEditor = (props) => {\n    const { rowData } = props\n    const fieldName = \"priceList\"\n\n    return (\n      <PriceListSelector\n        selectedItem={rowData[fieldName]}\n        onChange={(percentType) =>\n          handleSalePriceChange(rowData, fieldName, percentType)\n        }\n      />\n    )\n  }\n\n  const handleSalePriceChange = (salePrice, field, value) => {\n    let salePrices = Object.assign([], formData.salePrices)\n    const index = salePrices.findIndex((item) => item.uid === salePrice.uid)\n\n    salePrices[index][field] = value\n\n    if (field === \"finalPrice\") {\n      const taxRate = parseFloat(formData.fiscalTaxRate.rate) / 100 + 1\n      const netCost = parseFloat(formData.netCost)\n      const salePrice = parseFloat(value)\n      const utility = ((salePrice / taxRate - netCost) / netCost) * 100\n\n      salePrices[index].utility = utility.toFixed(4)\n    }\n\n    handleProductPropertyChange(\"salePrices\", salePrices)\n  }\n\n  const removePrice = (salePrice) => {\n    let prices = Object.assign([], formData.salePrices)\n\n    _.remove(prices, (item) => {\n      return item.uid === salePrice.uid\n    })\n\n    handleProductPropertyChange(\"salePrices\", prices)\n  }\n\n  const addSalePrice = () => {\n    let salePrices = Object.assign([], formData.salePrices)\n    const newSalePrice = {\n      uid: uuid(),\n      utility: \"\",\n      finalPrice: \"\",\n      netPrice: \"\",\n      priceList: { displayName: \"\" },\n    }\n\n    salePrices.push(newSalePrice)\n\n    handleProductPropertyChange(\"salePrices\", salePrices)\n  }\n\n  const getPriceTableActions = (rowData) => {\n    return (\n      <div className=\"p-grid p-fluid\">\n        <div className=\"p-col-6\">\n          <Button\n            type=\"button\"\n            icon=\"fa fa-fw fa-trash\"\n            className=\"p-button-danger\"\n            onClick={() => removePrice(rowData)}\n            tooltip={\"Quitar ítem\"}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  const handleProductPropertyChange = (property, value) => {\n    let product = { ...formData }\n\n    product[property] = value\n\n    if (property === \"category\") {\n      product.subCategory = null\n    }\n\n    handleChange(product)\n  }\n\n  const handleGetProductInfo = (productInfo) => {\n    setEditingProduct(productInfo)\n\n    let { percentages, salePrices } = productInfo\n\n    percentages.forEach((percent) => {\n      percent.uid = uuid()\n    })\n    salePrices.forEach((salePrice) => {\n      salePrice.uid = uuid()\n    })\n\n    setLoading(false)\n    setFormData({ ...formData, ...productInfo })\n  }\n\n  const renderPercentTableHeader = () => {\n    return (\n      <div className=\"p-fluid p-grid\">\n        <div className=\"p-col-8\">\n          <div>{\"Porcentajes\"}</div>\n        </div>\n        <div className=\"p-col-4\">\n          <Button\n            label=\"Agregar porcentaje\"\n            icon=\"fa fa-fw fa-plus\"\n            className=\"p-button-success\"\n            type=\"button\"\n            onClick={addPercent}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  const renderPriceTableHeader = () => {\n    return (\n      <div className=\"p-fluid p-grid\">\n        <div className=\"p-col-8\">\n          <div>{\"Precios\"}</div>\n        </div>\n        <div className=\"p-col-4\">\n          <Button\n            label=\"Agregar precio\"\n            icon=\"fa fa-fw fa-plus\"\n            className=\"p-button-success\"\n            type=\"button\"\n            onClick={addSalePrice}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  const updatePrices = (product) => {\n    const taxRate = parseFloat(_.get(product, \"fiscalTaxRate.rate\", \"0\")) / 100 + 1\n    const percentages = product.percentages\n    const salePrices = product.salePrices\n    let netCost = parseFloat(product.grossCost)\n\n    percentages.forEach((p) => {\n      if (p.percentType.percent) {\n        netCost += netCost * (p.rate / 100)\n      } else {\n        netCost += p.value\n      }\n    })\n\n    product.netCost = netCost.toFixed(4)\n\n    salePrices.forEach((salePrice) => {\n      const utility = parseFloat(salePrice.utility) / 100\n      const netPrice = netCost + netCost * utility\n\n      salePrice.netPrice = netPrice.toFixed(4)\n      salePrice.finalPrice = (netPrice * taxRate).toFixed(4)\n    })\n  }\n\n  const validateProductCode = () => {\n    if (formData.code) {\n      productsService.validateProductCode(formData, (error) =>\n        handleDuplicatedCodeError(error)\n      )\n    }\n  }\n\n  const handleDuplicatedCodeError = (error) => {\n    toast.current.show({\n      severity: \"error\",\n      summary: `Código duplicado [${error.errorCode}]`,\n      detail: error.message,\n    })\n  }\n\n  const handleChange = (newData) => {\n    updatePrices(newData)\n    setFormData(newData)\n  }\n\n  return (\n    <div className=\"card card-w-title\">\n      <Toast ref={toast} />\n      <h1>{getTitle()}</h1>\n\n      <Form\n        data={formData}\n        onChange={handleChange}\n        schema={productSchema}\n        onSubmit={handleSubmit}\n        errorMessages={{\n          required: () => fieldRequiredDefaultMessage,\n          pattern: () => invalidPatternMessage,\n        }}\n      >\n        <div className=\"card \">\n          <h1 style={{ fontSize: \"16px\" }}>Identificación</h1>\n          {renderIdentificationSection()}\n        </div>\n\n        <div className=\"card \">\n          <h1 style={{ fontSize: \"16px\" }}>Precios</h1>\n          {renderPricingSection()}\n        </div>\n\n        <div className=\"card \">\n          <h1 style={{ fontSize: \"16px\" }}>Clasificación</h1>\n          {renderClassificationSection()}\n        </div>\n\n        <div className=\"card \">\n          <h1 style={{ fontSize: \"16px\" }}>Stock</h1>\n          {renderStockSection()}\n        </div>\n\n        <LoadingButton\n          type=\"submit\"\n          label=\"Guardar\"\n          loading={loading}\n          icon=\"fa fa-fw fa-save\"\n        />\n        <Button\n          type=\"button\"\n          label=\"Cerrar\"\n          className=\"p-button-secondary\"\n          icon=\"fa fa-fw fa-arrow-left\"\n          onClick={() => {\n            window.close()\n          }}\n        />\n      </Form>\n    </div>\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/service/FiscalTaxRateService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/FiscalTaxRateSelector.js",["354"],"import React, { useEffect, useState } from \"react\"\nimport { Dropdown } from \"primereact/dropdown\"\nimport { FiscalTaxRateService } from \"../../service/FiscalTaxRateService\"\n\nexport const FiscalTaxRateSelector = ({ onTaxRateSelect, selectedTaxRate }) => {\n  const [currentTaxRate, setCurrentTaxRate] = useState(selectedTaxRate)\n  const [taxRates, setTaxRates] = useState([])\n  const service = new FiscalTaxRateService()\n\n  useEffect(() => service.getTaxRates(handleTaxRates), [])\n  useEffect(() => setCurrentTaxRate(selectedTaxRate), [selectedTaxRate])\n\n  const handleTaxRates = (brands) => {\n    setTaxRates(brands)\n  }\n\n  const handleSelectionChange = (value) => {\n    setCurrentTaxRate(value)\n\n    if (onTaxRateSelect) {\n      onTaxRateSelect(value)\n    }\n  }\n\n  return (\n    <Dropdown\n      id=\"taxRate\"\n      placeholder={\"Tasa IVA\"}\n      filter={true}\n      dataKey=\"taxRateId\"\n      options={taxRates}\n      showClear={true}\n      value={currentTaxRate}\n      optionLabel=\"displayName\"\n      onChange={(e) => handleSelectionChange(e.value)}\n    />\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/utils/Logger.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/utils/HTTPService.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/PercentTypesSelector.js",["355"],"import React, { useEffect, useState } from \"react\"\nimport { Dropdown } from \"primereact/dropdown\"\nimport { ProductsService } from \"../../service/ProductsService\"\n\nexport const PercentTypesSelector = ({ onChange, selectedItem }) => {\n  const [currentPercentType, setCurrentPercentType] = useState(selectedItem)\n  const [percentTypes, setPercentTypes] = useState([])\n  const service = new ProductsService()\n\n  useEffect(() => service.getPercentTypes(handlePercentTypes), [])\n  useEffect(() => setCurrentPercentType(selectedItem), [selectedItem])\n\n  const handlePercentTypes = (values) => {\n    setPercentTypes(values)\n  }\n\n  const handleSelectionChange = (value) => {\n    setCurrentPercentType(value)\n\n    if (onChange) {\n      onChange(value)\n    }\n  }\n\n  return (\n    <Dropdown\n      id=\"percentType\"\n      placeholder={\"Tipo de porcentaje\"}\n      filter={true}\n      dataKey=\"percentTypeId\"\n      options={percentTypes}\n      showClear={true}\n      value={currentPercentType}\n      optionLabel=\"displayName\"\n      onChange={(e) => handleSelectionChange(e.value)}\n    />\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/PriceListSelector.js",["356"],"import React, { useEffect, useState } from \"react\"\nimport { Dropdown } from \"primereact/dropdown\"\nimport { ProductsService } from \"../../service/ProductsService\"\n\nexport const PriceListSelector = ({ onChange, selectedItem }) => {\n  const [currentPriceList, setCurrentPriceList] = useState(selectedItem)\n  const [priceLists, setPriceLists] = useState([])\n  const service = new ProductsService()\n\n  useEffect(() => service.getPriceLists(handlePriceLists), [])\n  useEffect(() => setCurrentPriceList(selectedItem), [selectedItem])\n\n  const handlePriceLists = (values) => {\n    setPriceLists(values)\n  }\n\n  const handleSelectionChange = (value) => {\n    setCurrentPriceList(value)\n\n    if (onChange) {\n      onChange(value)\n    }\n  }\n\n  return (\n    <Dropdown\n      id=\"priceList\"\n      placeholder={\"Lista de precios\"}\n      filter={true}\n      dataKey=\"priceListId\"\n      options={priceLists}\n      showClear={true}\n      value={currentPriceList}\n      optionLabel=\"displayName\"\n      onChange={(e) => handleSelectionChange(e.value)}\n    />\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/utils/ExcelExporter.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/sale/ExportSalesUtils.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/ProductSupplyTypeSelector.js",["357"],"import React, { useEffect, useState } from \"react\"\nimport { Dropdown } from \"primereact/dropdown\"\nimport { ProductsService } from \"../../service/ProductsService\"\n\nexport const ProductSupplyTypeSelector = ({\n  onSupplyTypeSelect,\n  selectedSupplyType,\n}) => {\n  const [currentSupplyType, setCurrentSupplyType] = useState(selectedSupplyType)\n  const [supplyTypes, setSupplyTypes] = useState([])\n  const service = new ProductsService()\n\n  useEffect(() => service.getSupplyTypes(handleGetSupplyTypes), [])\n  useEffect(() => setCurrentSupplyType(selectedSupplyType), [selectedSupplyType])\n\n  const handleGetSupplyTypes = (supplyTypes) => {\n    setSupplyTypes(supplyTypes)\n  }\n\n  const handleSelectionChange = (value) => {\n    setCurrentSupplyType(value)\n\n    if (onSupplyTypeSelect) {\n      onSupplyTypeSelect(value)\n    }\n  }\n\n  return (\n    <Dropdown\n      id=\"supplyType\"\n      placeholder={\"Tipo de proveeduria\"}\n      filter={true}\n      dataKey=\"supplyTypeId\"\n      options={supplyTypes}\n      showClear={true}\n      value={currentSupplyType}\n      optionLabel=\"displayName\"\n      onChange={(e) => handleSelectionChange(e.value)}\n    />\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/ProductUnitTypeSelector.js",["358"],"import React, { useEffect, useState } from \"react\"\nimport { Dropdown } from \"primereact/dropdown\"\nimport { ProductsService } from \"../../service/ProductsService\"\n\nexport const ProductUnitTypeSelector = ({ onSelectUnitType, selectedUnitType }) => {\n  const [currentUnitType, setCurrentUnitType] = useState(selectedUnitType)\n  const [unitTypes, setUnitTypes] = useState([])\n  const service = new ProductsService()\n\n  useEffect(() => service.getUnitTypes(handleUnitTypes), [])\n  useEffect(() => setCurrentUnitType(selectedUnitType), [selectedUnitType])\n\n  const handleUnitTypes = (values) => {\n    setUnitTypes(values)\n  }\n\n  const handleSelectionChange = (value) => {\n    setCurrentUnitType(value)\n\n    if (onSelectUnitType) {\n      onSelectUnitType(value)\n    }\n  }\n  return (\n    <Dropdown\n      id=\"unitType\"\n      placeholder={\"\"}\n      filter={true}\n      dataKey=\"unitTypeId\"\n      options={unitTypes}\n      showClear={true}\n      value={currentUnitType}\n      optionLabel=\"unitName\"\n      onChange={(e) => handleSelectionChange(e.value)}\n    />\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/SearchPersonsFilter.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/customers/CustomersInventory.js",["359"],"import React, { useEffect, useState } from \"react\"\nimport { Button } from \"primereact/button\"\nimport { CustomersService } from \"../../service/CustomersService\"\nimport { SearchPersonsFilter } from \"../core/SearchPersonsFilter\"\nimport { DataTable } from \"primereact/datatable\"\nimport { Column } from \"primereact/column\"\nimport _ from \"lodash\"\n\nconst CUSTOMER_COLUMNS = [\n  { field: \"personId\", header: \"Id\" },\n  { field: \"businessName\", header: \"Nombre\" },\n  { field: \"identification\", header: \"Identificación\" },\n  { field: \"fantasyName\", header: \"Nombre Fantasía\" },\n  { field: \"email\", header: \"e-mail\" },\n  { field: \"address\", header: \"Dirección\" },\n]\n\nexport const CustomersInventory = () => {\n  const [loading, setLoading] = useState(false)\n  const [customers, setCustomers] = useState([])\n  const [totalRecords, setTotalRecords] = useState(0)\n  const rowsPerPage = 20\n  const [first, setFirst] = useState(0)\n  const [searchFilter, setSearchFilter] = useState({\n    activo: true,\n    cliente: true,\n    sortFields: [\n      {\n        fieldName: \"razonSocial\",\n        ascending: true,\n      },\n    ],\n  })\n  useEffect(() => {\n    onPageEvent({ first: 0 })\n  }, [searchFilter])\n  const customersService = new CustomersService()\n\n  const fillSearchFilter = (searchCriteria) => {\n    setSearchFilter({ ...searchFilter, ...searchCriteria })\n  }\n\n  const renderFilterSection = () => {\n    return (\n      <SearchPersonsFilter\n        searchCustomersCallback={fillSearchFilter}\n        loading={loading}\n      />\n    )\n  }\n\n  const onPageEvent = (event) => {\n    const searchOptions = {\n      firstResult: event.first,\n      maxResults: rowsPerPage,\n      searchFilter: searchFilter,\n    }\n\n    customersService.searchCustomers(searchOptions, handleSuccess)\n\n    setLoading(true)\n    setFirst(event.first)\n  }\n\n  const handleSuccess = (data) => {\n    setTotalRecords(data.totalResults)\n    setCustomers(data.data)\n    setLoading(false)\n  }\n\n  const getLinkActions = (rowData) => {\n    const { personId } = rowData\n\n    return (\n      <Button\n        type=\"button\"\n        icon=\"fa fa-fw fa-edit\"\n        onClick={() => handleEditCustomer(personId)}\n      />\n    )\n  }\n\n  const handleEditCustomer = (customerId) => {\n    window.open(`#/customer/${customerId}`, \"_blank\")\n  }\n\n  const renderColumns = () => {\n    let columns = CUSTOMER_COLUMNS.map((col, i) => {\n      return (\n        <Column\n          key={col.field}\n          field={col.field}\n          header={col.header}\n          style={col.style}\n          body={(rowData) => _.get(rowData, col.field)}\n        />\n      )\n    })\n\n    columns.push(<Column body={getLinkActions} />)\n\n    return columns\n  }\n\n  const renderSearchResults = () => {\n    return (\n      <DataTable\n        value={customers}\n        dataKey={\"personId\"}\n        paginator={true}\n        rows={rowsPerPage}\n        totalRecords={totalRecords}\n        lazy={true}\n        first={first}\n        onPage={onPageEvent}\n        loading={loading}\n        loadingIcon=\"fa fa-fw fa-spin fa-spinner\"\n        resizableColumns\n      >\n        {renderColumns()}\n      </DataTable>\n    )\n  }\n\n  return (\n    <div className=\"card card-w-title\">\n      <h1>Mayor de clientes</h1>\n      {renderFilterSection()}\n      <Button\n        type=\"button\"\n        label={\"Nuevo\"}\n        icon=\"fa fa-fw fa-plus\"\n        onClick={() => window.open(`#/customer/`, \"_blank\")}\n      />\n      {renderSearchResults()}\n    </div>\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/customers/CustomerDetails.js",["360","361","362","363","364","365"],"import _ from \"lodash\"\nimport React, { useEffect, useRef, useState } from \"react\"\nimport { FieldError, Form } from \"react-jsonschema-form-validation\"\nimport { CustomersService } from \"../../service/CustomersService\"\nimport { InputText } from \"primereact/inputtext\"\nimport Field from \"react-jsonschema-form-validation/dist/Field\"\nimport {\n  emailInvalidFormatMessage,\n  fieldRequiredDefaultMessage,\n  invalidPatternMessage,\n} from \"../../custom-error-form.messages\"\nimport { Dropdown } from \"primereact/dropdown\"\nimport { LoadingButton } from \"../core/LoadingButton\"\nimport { Button } from \"primereact/button\"\nimport { Toast } from \"primereact/toast\"\nimport { Checkbox } from \"primereact/checkbox\"\nimport { DataTable } from \"primereact/datatable\"\nimport { Column } from \"primereact/column\"\n\nconst newCustomerSchema = {\n  type: \"object\",\n  properties: {\n    email: { type: \"string\", format: \"email\" },\n    razonSocial: {\n      type: \"string\",\n      minLength: 1,\n      maxLength: 200,\n      pattern: \"^[a-zA-ZñÑ,.. ]*$\",\n    },\n    apellidos: {\n      type: \"string\",\n      minLength: 1,\n      maxLength: 60,\n      pattern: \"^[a-zA-ZñÑ. ]*$\",\n    },\n    nombres: {\n      type: \"string\",\n      minLength: 1,\n      maxLength: 60,\n      pattern: \"^[a-zA-ZñÑ. ]*$\",\n    },\n    nombreFantasia: { type: \"string\", maxLength: 200 },\n    calle: { type: \"string\", maxLength: 100, pattern: \"^[-a-zA-Z0-9.. ]*$\" },\n    altura: { type: \"string\", maxLength: 50, pattern: \"^[-0-9]*$\" },\n    piso: { type: \"string\", maxLength: 3, pattern: \"^[-0-9]*$\" },\n    depto: { type: \"string\", maxLength: 5, pattern: \"^[-a-zA-Z0-9]*$\" },\n    documento: { type: \"string\", minLength: 7, maxLength: 13, pattern: \"^[0-9]*$\" },\n    tipoPersoneria: { type: \"object\" },\n    genero: { type: \"object\" },\n    tipoDocumento: { type: \"object\" },\n    responsabilidadIva: { type: \"object\" },\n    pais: { type: \"object\" },\n    provincia: { type: \"object\" },\n    localidad: { type: \"object\" },\n    activo: { type: \"boolean\" },\n    telefonos: {\n      type: \"array\",\n      items: {\n        type: \"object\",\n        properties: {\n          areaCode: { type: \"string\", minLength: 3, maxLength: 5 },\n          number: { type: \"string\", minLength: 6, maxLength: 9 },\n          reference: { type: \"string\" },\n        },\n        required: [\"areaCode\", \"number\"],\n      },\n    },\n  },\n  required: [\n    \"documento\",\n    \"tipoPersoneria\",\n    \"genero\",\n    \"tipoDocumento\",\n    \"calle\",\n    \"altura\",\n    \"piso\",\n    \"depto\",\n    \"responsabilidadIva\",\n    \"pais\",\n    \"provincia\",\n    \"localidad\",\n  ],\n}\n\nexport const CustomerDetails = (props) => {\n  const customersService = new CustomersService()\n\n  const [loading, setLoading] = useState(false)\n  const [saveDisabled, setSaveDisabled] = useState(false)\n\n  const [legalStatusTypes, setLegalStatusTypes] = useState([])\n  const [genders, setGenders] = useState([])\n  const [responsabilidadesIva, setResponsabilidadesIva] = useState([])\n  const [countries, setCountries] = useState([])\n  const [provinces, setProvinces] = useState([])\n  const [towns, setTowns] = useState([])\n  const [identificationTypes, setIdentificationTypes] = useState([])\n\n  const [formData, setFormData] = useState({\n    email: \"\",\n    documento: \"\",\n    tipoPersoneria: null,\n    genero: null,\n    tipoDocumento: null,\n    razonSocial: \"\",\n    apellidos: \"\",\n    nombres: \"\",\n    nombreFantasia: \"\",\n    calle: \"-\",\n    altura: \"-\",\n    depto: \"-\",\n    piso: \"-\",\n    responsabilidadIva: null,\n    pais: null,\n    provincia: null,\n    localidad: null,\n    activo: true,\n    telefonos: [],\n  })\n\n  const [customerId, setCustomerId] = useState(props.match.params.customerId)\n  const [editingCustomer, setEditingCustomer] = useState(null)\n\n  const toast = useRef(null)\n\n  useEffect(() => {\n    customersService.getLegalStatusTypes((data) => {\n      setLegalStatusTypes(data)\n    })\n    customersService.getResponsabilidadesIva(setResponsabilidadesIva)\n    customersService.getCountries(setCountries)\n  }, [])\n\n  useEffect(() => {\n    customersService.getCustomer(customerId, loadCustomer)\n  }, [customerId])\n\n  useEffect(() => {\n    const { tipoPersoneria } = formData\n\n    if (tipoPersoneria) {\n      customersService.getGenders(tipoPersoneria.id, (data) => {\n        setGenders(data)\n        //setGenero(data[0])\n      })\n      customersService.getIdentificationTypes(tipoPersoneria.id, (data) => {\n        setIdentificationTypes(data)\n        //setTipoDocumento(data[0])\n      })\n    }\n  }, [formData?.tipoPersoneria])\n  useEffect(() => {\n    if (formData.pais) {\n      //setProvincia(null)\n      //setLocalidad(null)\n      setProvinces([])\n      setTowns([])\n      customersService.getProvinces(formData.pais.id, setProvinces)\n    }\n  }, [formData?.pais])\n  useEffect(() => {\n    if (formData.provincia) {\n      //setLocalidad(null)\n      setTowns([])\n      customersService.getTowns(formData.provincia.id, \"\", setTowns)\n    }\n  }, [formData?.provincia])\n\n  const loadCustomer = (customer) => {\n    setEditingCustomer(customer)\n\n    const customerData = {\n      customerId: customer.customerId,\n      email: customer.email,\n      nombres: customer.nombres,\n      apellidos: customer.apellidos,\n      razonSocial: customer.razonSocial,\n      version: customer.version,\n      documento: customer.documento,\n      calle: customer.calle,\n      altura: customer.altura,\n      piso: customer.piso,\n      depto: customer.depto,\n      pais: customer.pais,\n      provincia: customer.provincia,\n      localidad: customer.localidad,\n      genero: customer.genero,\n      tipoPersoneria: customer.tipoPersoneria,\n      tipoDocumento: customer.tipoDocumento,\n      nombreFantasia: customer.fantasyName || \"\",\n      responsabilidadIva: customer.tipoResponsableIva,\n      activo: customer.activo,\n      telefonos: transformPhones(customer.phones),\n    }\n    setFormData({ ...formData, ...customerData })\n  }\n\n  const transformPhones = (phones) => {\n    if (phones) {\n      return phones.map((phone) => {\n        const areaCode = phone.phoneNumber.split(\" \")[0]\n        const number = phone.phoneNumber.split(\" \")[1]\n        return {\n          areaCode: areaCode,\n          number: number,\n          reference: phone.reference,\n          version: phone.version,\n          id: phone.id,\n        }\n      })\n    }\n  }\n\n  const getValidationSchema = () => {\n    let validationSchema = _.cloneDeep(newCustomerSchema)\n    const { tipoPersoneria } = formData\n    if (tipoPersoneria) {\n      if (tipoPersoneria.id === 2) {\n        validationSchema.required = validationSchema.required.concat(\"razonSocial\")\n      } else {\n        validationSchema.required = validationSchema.required.concat(\n          \"nombres\",\n          \"apellidos\"\n        )\n      }\n    }\n    return validationSchema\n  }\n\n  const getLegalPersonFields = () => {\n    const { tipoPersoneria } = formData\n\n    if (tipoPersoneria?.id === 2) {\n      return (\n        <div className=\"p-col-12\">\n          <label htmlFor=\"razonSocial\">Razón Social:</label>\n\n          <Field\n            id=\"razonSocial\"\n            component={InputText}\n            name=\"razonSocial\"\n            value={formData.razonSocial}\n          />\n          <FieldError name=\"razonSocial\" />\n        </div>\n      )\n    }\n  }\n\n  const getRegularPersonFields = () => {\n    const { tipoPersoneria } = formData\n\n    if (tipoPersoneria?.id === 1) {\n      return (\n        <>\n          <div className=\"p-col-6\">\n            <label htmlFor=\"apellidos\">Apellidos:</label>\n\n            <Field\n              id=\"apellidos\"\n              component={InputText}\n              name=\"apellidos\"\n              value={formData.apellidos}\n            />\n            <FieldError name=\"apellidos\" />\n          </div>\n\n          <div className=\"p-col-6\">\n            <label htmlFor=\"nombres\">Nombres:</label>\n\n            <Field\n              id=\"nombres\"\n              component={InputText}\n              name=\"nombres\"\n              value={formData.nombres}\n            />\n            <FieldError name=\"nombres\" />\n          </div>\n        </>\n      )\n    }\n  }\n\n  const handleChange = (newData) => {\n    setFormData(newData)\n  }\n\n  const handleExistingCustomer = (customer) => {\n    if (customer.customerId != customerId) {\n      toast.current.show({\n        severity: \"error\",\n        summary: \"Ya existe un cliente con estos datos\",\n        detail: `${customer.businessName} ${customer.identification}`,\n      })\n\n      setSaveDisabled(true)\n    }\n  }\n\n  const handleNotExistentCustomer = (error) => {\n    if (error.errorCode === \"404002\") {\n      setSaveDisabled(false)\n    }\n  }\n\n  const checkExistingCustomer = () => {\n    const { tipoDocumento, documento } = formData\n\n    if (tipoDocumento && documento) {\n      const searchData = {\n        idTipoDocumento: tipoDocumento.id,\n        documento: documento,\n      }\n      customersService.retrieveCustomer(\n        searchData,\n        handleExistingCustomer,\n        handleNotExistentCustomer\n      )\n    } else {\n      setSaveDisabled(true)\n    }\n  }\n\n  const handleSubmit = () => {\n    setLoading(true)\n\n    if (editingCustomer) {\n      const customerToEdit = {\n        ...formData,\n        ...{\n          customerId: editingCustomer.customerId,\n          version: editingCustomer.version,\n        },\n      }\n      customersService.updateCustomer(customerToEdit, handleSuccess, handleError)\n    } else {\n      customersService.addNewCustomer(formData, handleSuccess, handleError)\n    }\n  }\n\n  const handleSuccess = (createdCustomer) => {\n    setLoading(false)\n    if (createdCustomer) {\n      setCustomerId(createdCustomer.customerId)\n    } else {\n      customersService.getCustomer(customerId, loadCustomer)\n    }\n    toast.current.show({\n      severity: \"success\",\n      summary: \"Cliente guardado con éxito\",\n    })\n  }\n\n  const handleError = (error) => {\n    let detail = \"Error desconocido\"\n\n    setLoading(false)\n\n    if (_.get(error, \"errorCode\") === \"400999\") {\n      detail = error.fieldErrors.map((errorField) => {\n        return errorField + \"\\n\"\n      })\n    }\n    if (_.get(error, \"errorCode\") === \"400001\") {\n      detail = error.message\n    }\n\n    toast.current.show({\n      severity: \"error\",\n      summary: \"No se pudo guardar el cliente\",\n      detail: detail,\n      sticky: true,\n    })\n  }\n\n  const getTitle = () => {\n    if (customerId) {\n      return `Edición de cliente: ${customerId}`\n    }\n    return \"Nuevo cliente\"\n  }\n\n  const getTelefonosTableHeader = () => {\n    return (\n      <div className=\"p-fluid \">\n        <div className=\"p-grid \">\n          <div className=\"p-col-11\">Teléfonos</div>\n          <div className=\"p-col-1\">\n            <Button\n              type=\"button\"\n              className=\"p-button-success\"\n              icon=\"fa fa-fw fa-plus\"\n              onClick={addNewPhone}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const addNewPhone = () => {\n    formData.telefonos.splice(0, 0, { areaCode: \"0\", number: \"\", reference: \"\" })\n\n    handleChange(formData)\n  }\n\n  const inputTextEditor = (props, field) => {\n    return (\n      <div>\n        <Field\n          component={InputText}\n          name={field}\n          onChange={(e) => onEditorValueChange(props, e.target.value)}\n          value={props.rowData[field]}\n        />\n        <FieldError name={`telefonos.${props.rowIndex}.${field}`} />\n      </div>\n    )\n  }\n\n  const onEditorValueChange = (props, value) => {\n    let updatedTelefonos = [...props.value]\n    let updatedFormData = { ...{}, ...formData }\n    updatedTelefonos[props.rowIndex][props.field] = value\n\n    updatedFormData.telefonos = updatedTelefonos\n\n    handleChange(updatedFormData)\n  }\n\n  return (\n    <div className=\"card card-w-title\">\n      <h1>{getTitle()}</h1>\n      <Toast ref={toast} />\n      <Form\n        data={formData}\n        schema={getValidationSchema()}\n        errorMessages={{\n          required: () => fieldRequiredDefaultMessage,\n          pattern: () => invalidPatternMessage,\n        }}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n      >\n        <div className=\"card p-fluid \">\n          <div className=\"p-grid \">\n            <div className=\"p-col-6\">\n              <label htmlFor=\"tipoPersoneria\">Tipo Personería:</label>\n\n              <Field\n                component={Dropdown}\n                options={legalStatusTypes}\n                optionLabel=\"nombreTipo\"\n                name=\"tipoPersoneria\"\n                dataKey=\"id\"\n                value={formData.tipoPersoneria}\n              />\n\n              <FieldError name=\"tipoPersoneria\" />\n            </div>\n\n            <div className=\"p-col-6\">\n              <label htmlFor=\"genero\">Género:</label>\n\n              <Field\n                component={Dropdown}\n                options={genders}\n                optionLabel=\"nombreGenero\"\n                dataKey=\"id\"\n                name=\"genero\"\n                value={formData.genero}\n              />\n\n              <FieldError name=\"genero\" />\n            </div>\n\n            <div className=\"p-col-3\">\n              <label htmlFor=\"tipoDocumento\">Tipo Documento:</label>\n\n              <Field\n                component={Dropdown}\n                options={identificationTypes}\n                optionLabel=\"identificationTypeName\"\n                name=\"tipoDocumento\"\n                dataKey=\"id\"\n                value={formData.tipoDocumento}\n              />\n\n              <FieldError name=\"tipoDocumento\" />\n            </div>\n            <div className=\"p-col-9\">\n              <label htmlFor=\"documento\">Número:</label>\n\n              <div className=\"p-inputgroup\">\n                <Field\n                  id=\"documento\"\n                  component={InputText}\n                  name=\"documento\"\n                  mode=\"decimal\"\n                  useGrouping={false}\n                  onBlur={checkExistingCustomer}\n                  value={formData.documento}\n                />\n              </div>\n              <FieldError name=\"documento\" />\n            </div>\n\n            {getLegalPersonFields()}\n            {getRegularPersonFields()}\n\n            <div className=\"p-col-12\">\n              <label htmlFor=\"nombreFantasia\">Nombre Fantasía:</label>\n\n              <Field\n                id=\"nombreFantasia\"\n                component={InputText}\n                name=\"nombreFantasia\"\n                value={formData.nombreFantasia}\n              />\n              <FieldError name=\"nombreFantasia\" />\n            </div>\n\n            <div className=\"p-col-12\">\n              <label htmlFor=\"responsabilidadIva\">Responsabilidad IVA:</label>\n\n              <Field\n                component={Dropdown}\n                //onChange={(newVal, handleFieldChange) => handleFieldChange('responsabilidadIva', newVal)}\n                options={responsabilidadesIva}\n                optionLabel=\"nombreResponsabildiad\"\n                name=\"responsabilidadIva\"\n                dataKey=\"id\"\n                value={formData.responsabilidadIva}\n              />\n\n              <FieldError name=\"responsabilidadIva\" />\n            </div>\n\n            <div className=\"p-col-4\">\n              <label htmlFor=\"pais\">País:</label>\n\n              <Field\n                component={Dropdown}\n                options={countries}\n                optionLabel=\"nombrePais\"\n                dataKey=\"id\"\n                name=\"pais\"\n                value={formData.pais}\n              />\n\n              <FieldError name=\"pais\" />\n            </div>\n            <div className=\"p-col-4\">\n              <label htmlFor=\"provincia\">Provincia:</label>\n\n              <Field\n                component={Dropdown}\n                options={provinces}\n                optionLabel=\"nombreProvincia\"\n                dataKey=\"id\"\n                name=\"provincia\"\n                value={formData.provincia}\n              />\n\n              <FieldError name=\"provincia\" />\n            </div>\n\n            <div className=\"p-col-4\">\n              <label htmlFor=\"localidad\">Localidad:</label>\n\n              <Field\n                component={Dropdown}\n                options={towns}\n                optionLabel=\"nombreLocalidad\"\n                dataKey=\"id\"\n                name=\"localidad\"\n                value={formData.localidad}\n              />\n\n              <FieldError name=\"localidad\" />\n            </div>\n\n            <div className=\"p-col-3\">\n              <label htmlFor=\"calle\">Calle:</label>\n\n              <Field\n                id=\"calle\"\n                component={InputText}\n                name=\"calle\"\n                onFocus={(e) => e.target.select()}\n                value={formData.calle}\n              />\n              <FieldError name=\"calle\" />\n            </div>\n\n            <div className=\"p-col-3\">\n              <label htmlFor=\"altura\">Altura:</label>\n\n              <Field\n                id=\"altura\"\n                component={InputText}\n                name=\"altura\"\n                onFocus={(e) => e.target.select()}\n                value={formData.altura}\n              />\n              <FieldError name=\"altura\" />\n            </div>\n\n            <div className=\"p-col-3\">\n              <label htmlFor=\"piso\">Piso:</label>\n\n              <Field\n                id=\"piso\"\n                component={InputText}\n                name=\"piso\"\n                onFocus={(e) => e.target.select()}\n                value={formData.piso}\n              />\n              <FieldError name=\"piso\" />\n            </div>\n\n            <div className=\"p-col-3\">\n              <label htmlFor=\"depto\">Dpto:</label>\n\n              <Field\n                id=\"depto\"\n                component={InputText}\n                name=\"depto\"\n                onFocus={(e) => e.target.select()}\n                value={formData.depto}\n              />\n              <FieldError name=\"depto\" />\n            </div>\n\n            <div className=\"SeparatorFull p-col-12\" />\n\n            <div className=\"p-col-12\">\n              <DataTable\n                value={formData.telefonos}\n                header={getTelefonosTableHeader()}\n                editable\n                emptyMessage=\"Agregue un teléfono para el cliente\"\n              >\n                <Column\n                  header=\"Código de área\"\n                  field=\"areaCode\"\n                  editor={(props) => {\n                    return inputTextEditor(props, \"areaCode\")\n                  }}\n                />\n                <Column\n                  header=\"Número\"\n                  field=\"number\"\n                  editor={(props) => {\n                    return inputTextEditor(props, \"number\")\n                  }}\n                />\n                <Column\n                  header=\"Referencia\"\n                  field=\"reference\"\n                  editor={(props) => {\n                    return inputTextEditor(props, \"reference\")\n                  }}\n                />\n              </DataTable>\n            </div>\n\n            <div className=\"p-col-12\">\n              <label htmlFor=\"email\">Email:</label>\n              <Field\n                id=\"email\"\n                component={InputText}\n                name=\"email\"\n                value={formData.email}\n              />\n              <FieldError\n                errorMessages={{ format: () => emailInvalidFormatMessage }}\n                name=\"email\"\n              />\n            </div>\n\n            <div className=\"p-col-12\">\n              <label htmlFor=\"activo\">Activo:</label>\n              <Field\n                id=\"active\"\n                component={Checkbox}\n                name=\"activo\"\n                checked={formData.activo}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"SeparatorFull\" />\n\n        <LoadingButton\n          type=\"submit\"\n          label=\"Guardar\"\n          loading={loading}\n          icon=\"fa fa-fw fa-save\"\n          disabled={saveDisabled}\n        />\n        <Button\n          type=\"button\"\n          label=\"Cerrar\"\n          className=\"p-button-secondary\"\n          icon=\"fa fa-fw fa-arrow-left\"\n          onClick={() => {\n            window.close()\n          }}\n        />\n      </Form>\n    </div>\n  )\n}\n","/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/InvoicePrintSplitButton.js",[],"/home/rodrigo/UI_Projects/gt-retail/webapp/src/components/core/BudgetPrintSplitButton.js",[],{"ruleId":"366","replacedBy":"367"},{"ruleId":"368","replacedBy":"369"},{"ruleId":"370","severity":1,"message":"371","line":66,"column":6,"nodeType":"372","endLine":66,"endColumn":8,"suggestions":"373"},{"ruleId":"370","severity":1,"message":"374","line":48,"column":6,"nodeType":"372","endLine":48,"endColumn":8,"suggestions":"375"},{"ruleId":"376","severity":1,"message":"377","line":8,"column":8,"nodeType":"378","messageId":"379","endLine":8,"endColumn":26},{"ruleId":"376","severity":1,"message":"377","line":10,"column":8,"nodeType":"378","messageId":"379","endLine":10,"endColumn":26},{"ruleId":"376","severity":1,"message":"380","line":12,"column":10,"nodeType":"378","messageId":"379","endLine":12,"endColumn":32},{"ruleId":"370","severity":1,"message":"381","line":26,"column":5,"nodeType":"372","endLine":26,"endColumn":13,"suggestions":"382"},{"ruleId":"376","severity":1,"message":"383","line":33,"column":16,"nodeType":"378","messageId":"379","endLine":33,"endColumn":23},{"ruleId":"370","severity":1,"message":"381","line":17,"column":69,"nodeType":"372","endLine":17,"endColumn":71,"suggestions":"384"},{"ruleId":"366","replacedBy":"385"},{"ruleId":"368","replacedBy":"386"},{"ruleId":"370","severity":1,"message":"387","line":10,"column":60,"nodeType":"372","endLine":10,"endColumn":62,"suggestions":"388"},{"ruleId":"370","severity":1,"message":"387","line":19,"column":6,"nodeType":"372","endLine":19,"endColumn":18,"suggestions":"389"},{"ruleId":"370","severity":1,"message":"387","line":10,"column":55,"nodeType":"372","endLine":10,"endColumn":57,"suggestions":"390"},{"ruleId":"376","severity":1,"message":"391","line":102,"column":10,"nodeType":"378","messageId":"379","endLine":102,"endColumn":24},{"ruleId":"370","severity":1,"message":"392","line":116,"column":6,"nodeType":"372","endLine":116,"endColumn":17,"suggestions":"393"},{"ruleId":"370","severity":1,"message":"387","line":10,"column":56,"nodeType":"372","endLine":10,"endColumn":58,"suggestions":"394"},{"ruleId":"370","severity":1,"message":"387","line":10,"column":64,"nodeType":"372","endLine":10,"endColumn":66,"suggestions":"395"},{"ruleId":"370","severity":1,"message":"387","line":10,"column":60,"nodeType":"372","endLine":10,"endColumn":62,"suggestions":"396"},{"ruleId":"370","severity":1,"message":"387","line":13,"column":65,"nodeType":"372","endLine":13,"endColumn":67,"suggestions":"397"},{"ruleId":"370","severity":1,"message":"387","line":10,"column":58,"nodeType":"372","endLine":10,"endColumn":60,"suggestions":"398"},{"ruleId":"370","severity":1,"message":"399","line":36,"column":6,"nodeType":"372","endLine":36,"endColumn":20,"suggestions":"400"},{"ruleId":"370","severity":1,"message":"401","line":132,"column":6,"nodeType":"372","endLine":132,"endColumn":8,"suggestions":"402"},{"ruleId":"370","severity":1,"message":"403","line":136,"column":6,"nodeType":"372","endLine":136,"endColumn":18,"suggestions":"404"},{"ruleId":"370","severity":1,"message":"405","line":151,"column":6,"nodeType":"372","endLine":151,"endColumn":32,"suggestions":"406"},{"ruleId":"370","severity":1,"message":"401","line":160,"column":6,"nodeType":"372","endLine":160,"endColumn":22,"suggestions":"407"},{"ruleId":"370","severity":1,"message":"401","line":167,"column":6,"nodeType":"372","endLine":167,"endColumn":27,"suggestions":"408"},{"ruleId":"409","severity":1,"message":"410","line":289,"column":29,"nodeType":"411","messageId":"412","endLine":289,"endColumn":31},"no-native-reassign",["413"],"no-negated-in-lhs",["414"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'deliveryNotesService'. Either include it or remove the dependency array.","ArrayExpression",["415"],"React Hook useEffect has a missing dependency: 'productsService'. Either include it or remove the dependency array.",["416"],"no-unused-vars","'FileOutputsService' is defined but never used.","Identifier","unusedVar","'BudgetPrintSplitButton' is defined but never used.","React Hook useEffect has a missing dependency: 'salesService'. Either include it or remove the dependency array.",["417"],"'setRows' is assigned a value but never used.",["418"],["413"],["414"],"React Hook useEffect has a missing dependency: 'service'. Either include it or remove the dependency array.",["419"],["420"],["421"],"'editingProduct' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleGetProductInfo' and 'productsService'. Either include them or remove the dependency array.",["422"],["423"],["424"],["425"],["426"],["427"],"React Hook useEffect has a missing dependency: 'onPageEvent'. Either include it or remove the dependency array.",["428"],"React Hook useEffect has a missing dependency: 'customersService'. Either include it or remove the dependency array.",["429"],"React Hook useEffect has missing dependencies: 'customersService' and 'loadCustomer'. Either include them or remove the dependency array.",["430"],"React Hook useEffect has missing dependencies: 'customersService' and 'formData'. Either include them or remove the dependency array.",["431"],["432"],["433"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"434","fix":"435"},{"desc":"436","fix":"437"},{"desc":"438","fix":"439"},{"desc":"440","fix":"441"},{"desc":"442","fix":"443"},{"desc":"444","fix":"445"},{"desc":"442","fix":"446"},{"desc":"447","fix":"448"},{"desc":"442","fix":"449"},{"desc":"442","fix":"450"},{"desc":"442","fix":"451"},{"desc":"442","fix":"452"},{"desc":"442","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},{"desc":"464","fix":"465"},"Update the dependencies array to be: [deliveryNotesService]",{"range":"466","text":"467"},"Update the dependencies array to be: [productsService]",{"range":"468","text":"469"},"Update the dependencies array to be: [saleId, salesService]",{"range":"470","text":"471"},"Update the dependencies array to be: [salesService]",{"range":"472","text":"473"},"Update the dependencies array to be: [service]",{"range":"474","text":"475"},"Update the dependencies array to be: [categoryId, service]",{"range":"476","text":"477"},{"range":"478","text":"475"},"Update the dependencies array to be: [handleGetProductInfo, productId, productsService]",{"range":"479","text":"480"},{"range":"481","text":"475"},{"range":"482","text":"475"},{"range":"483","text":"475"},{"range":"484","text":"475"},{"range":"485","text":"475"},"Update the dependencies array to be: [onPageEvent, searchFilter]",{"range":"486","text":"487"},"Update the dependencies array to be: [customersService]",{"range":"488","text":"489"},"Update the dependencies array to be: [customerId, customersService, loadCustomer]",{"range":"490","text":"491"},"Update the dependencies array to be: [customersService, formData, formData.tipoPersoneria]",{"range":"492","text":"493"},"Update the dependencies array to be: [customersService, formData.pais]",{"range":"494","text":"495"},"Update the dependencies array to be: [customersService, formData.provincia]",{"range":"496","text":"497"},[2728,2730],"[deliveryNotesService]",[1950,1952],"[productsService]",[1042,1050],"[saleId, salesService]",[700,702],"[salesService]",[475,477],"[service]",[610,622],"[categoryId, service]",[431,433],[3678,3689],"[handleGetProductInfo, productId, productsService]",[474,476],[469,471],[454,456],[498,500],[470,472],[1164,1178],"[onPageEvent, searchFilter]",[3970,3972],"[customersService]",[4059,4071],"[customerId, customersService, loadCustomer]",[4459,4485],"[customersService, formData, formData.tipoPersoneria]",[4707,4723],"[customersService, formData.pais]",[4901,4922],"[customersService, formData.provincia]"]